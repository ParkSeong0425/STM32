
10_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004de0  08004de0  00005de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de8  08004de8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dec  08004dec  00005dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004df0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  08004e58  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004e58  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e946  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  000149de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00016e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  00017bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e2  00000000  00000000  00018619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5d8  00000000  00000000  0002fffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090197  00000000  00000000  0003f5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf76a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e74  00000000  00000000  000cf7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d3624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d68 	.word	0x08004d68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004d68 	.word	0x08004d68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:

#include "delay_us.h"


void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11, 0); // 0개부터 카운트
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_GPIO_Init+0x7c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <MX_GPIO_Init+0x7c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <MX_GPIO_Init+0x80>)
 8000634:	f000 ffdc 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000638:	2320      	movs	r3, #32
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_GPIO_Init+0x80>)
 8000650:	f000 fe4a 	bl	80012e8 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000

08000664 <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, unsigned char* p, int len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, p, len, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	b29a      	uxth	r2, r3
 8000674:	2364      	movs	r3, #100	@ 0x64
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	4807      	ldr	r0, [pc, #28]	@ (8000698 <_write+0x34>)
 800067a:	f002 fc7f 	bl	8002f7c <HAL_UART_Transmit>
 800067e:	4603      	mov	r3, r0
 8000680:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK ? len : 0);
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <_write+0x28>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	e000      	b.n	800068e <_write+0x2a>
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000120 	.word	0x20000120

0800069c <HCSR04_TRIGGER>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HCSR04_TRIGGER()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <HCSR04_TRIGGER+0x44>)
 80006a6:	f000 ffa3 	bl	80015f0 <HAL_GPIO_WritePin>
  delay_us(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff ff7e 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2120      	movs	r1, #32
 80006b4:	480a      	ldr	r0, [pc, #40]	@ (80006e0 <HCSR04_TRIGGER+0x44>)
 80006b6:	f000 ff9b 	bl	80015f0 <HAL_GPIO_WritePin>
  delay_us(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f7ff ff76 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <HCSR04_TRIGGER+0x44>)
 80006c6:	f000 ff93 	bl	80015f0 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HCSR04_TRIGGER+0x48>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68da      	ldr	r2, [r3, #12]
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <HCSR04_TRIGGER+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f042 0202 	orr.w	r2, r2, #2
 80006d8:	60da      	str	r2, [r3, #12]

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	20000090 	.word	0x20000090

080006e8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim ->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7f1b      	ldrb	r3, [r3, #28]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d16d      	bne.n	80007d4 <HAL_TIM_IC_CaptureCallback+0xec>
  {
    if(captureFlag == 0)
 80006f8:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11b      	bne.n	8000738 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Value1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4837      	ldr	r0, [pc, #220]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000704:	f002 f898 	bl	8002838 <HAL_TIM_ReadCapturedValue>
 8000708:	4603      	mov	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800070e:	801a      	strh	r2, [r3, #0]
      captureFlag = 1; // capture done (rising)
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000716:	4b32      	ldr	r3, [pc, #200]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6a1a      	ldr	r2, [r3, #32]
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f022 020a 	bic.w	r2, r2, #10
 8000724:	621a      	str	r2, [r3, #32]
 8000726:	4b2e      	ldr	r3, [pc, #184]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a1a      	ldr	r2, [r3, #32]
 800072c:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f042 0202 	orr.w	r2, r2, #2
 8000734:	621a      	str	r2, [r3, #32]
      distance = echoTime/58;   // please watch your data sheet
      captureFlag = 0;
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
    }
  }
}
 8000736:	e04d      	b.n	80007d4 <HAL_TIM_IC_CaptureCallback+0xec>
    else if(captureFlag == 1)
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d149      	bne.n	80007d4 <HAL_TIM_IC_CaptureCallback+0xec>
      IC_Value2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4827      	ldr	r0, [pc, #156]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000744:	f002 f878 	bl	8002838 <HAL_TIM_ReadCapturedValue>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800074e:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a1a      	ldr	r2, [r3, #32]
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f022 020a 	bic.w	r2, r2, #10
 800075e:	621a      	str	r2, [r3, #32]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a12      	ldr	r2, [r2, #32]
 800076a:	621a      	str	r2, [r3, #32]
      if(IC_Value2 > IC_Value1)
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d908      	bls.n	800078a <HAL_TIM_IC_CaptureCallback+0xa2>
        echoTime = IC_Value2 - IC_Value1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	e00f      	b.n	80007aa <HAL_TIM_IC_CaptureCallback+0xc2>
      else if (IC_Value2 < IC_Value1)
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d209      	bcs.n	80007aa <HAL_TIM_IC_CaptureCallback+0xc2>
        echoTime = (0xffff- IC_Value1) + IC_Value2;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x104>)
 80007a8:	801a      	strh	r2, [r3, #0]
      distance = echoTime/58;   // please watch your data sheet
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x104>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4a10      	ldr	r2, [pc, #64]	@ (80007f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 80007b0:	fba2 2303 	umull	r2, r3, r2, r3
 80007b4:	095b      	lsrs	r3, r3, #5
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80007bc:	701a      	strb	r2, [r3, #0]
      captureFlag = 0;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68da      	ldr	r2, [r3, #12]
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0202 	bic.w	r2, r2, #2
 80007d2:	60da      	str	r2, [r3, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000008a 	.word	0x2000008a
 80007e0:	20000090 	.word	0x20000090
 80007e4:	20000084 	.word	0x20000084
 80007e8:	20000086 	.word	0x20000086
 80007ec:	20000088 	.word	0x20000088
 80007f0:	8d3dcb09 	.word	0x8d3dcb09
 80007f4:	2000008b 	.word	0x2000008b

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fb3a 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f826 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff feec 	bl	80005e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000808:	f000 f996 	bl	8000b38 <MX_TIM3_Init>
  MX_TIM11_Init();
 800080c:	f000 fa04 	bl	8000c18 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000810:	f000 fa8c 	bl	8000d2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);   // for delay_us() function
 8000814:	480a      	ldr	r0, [pc, #40]	@ (8000840 <main+0x48>)
 8000816:	f001 fbed 	bl	8001ff4 <HAL_TIM_Base_Start>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800081a:	2100      	movs	r1, #0
 800081c:	4809      	ldr	r0, [pc, #36]	@ (8000844 <main+0x4c>)
 800081e:	f001 fc9d 	bl	800215c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HCSR04_TRIGGER();
 8000822:	f7ff ff3b 	bl	800069c <HCSR04_TRIGGER>

    printf("DISTANCE : %d cm\n", distance);
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <main+0x50>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	@ (800084c <main+0x54>)
 800082e:	f003 fc2f 	bl	8004090 <iprintf>
    HAL_Delay(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000836:	f000 fb8f 	bl	8000f58 <HAL_Delay>
    HCSR04_TRIGGER();
 800083a:	bf00      	nop
 800083c:	e7f1      	b.n	8000822 <main+0x2a>
 800083e:	bf00      	nop
 8000840:	200000d8 	.word	0x200000d8
 8000844:	20000090 	.word	0x20000090
 8000848:	2000008b 	.word	0x2000008b
 800084c:	08004d80 	.word	0x08004d80

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fc6b 	bl	800413a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <SystemClock_Config+0xc8>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <SystemClock_Config+0xc8>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <SystemClock_Config+0xc8>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <SystemClock_Config+0xcc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a20      	ldr	r2, [pc, #128]	@ (800091c <SystemClock_Config+0xcc>)
 800089a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <SystemClock_Config+0xcc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fea5 	bl	8001624 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e0:	f000 f81e 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2302      	movs	r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2103      	movs	r1, #3
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f907 	bl	8001b14 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800090c:	f000 f808 	bl	8000920 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3750      	adds	r7, #80	@ 0x50
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 faa1 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <TIM3_IRQHandler+0x10>)
 80009e2:	f001 fcd5 	bl	8002390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000090 	.word	0x20000090

080009f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <USART2_IRQHandler+0x10>)
 80009f6:	f002 fb4d 	bl	8003094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000120 	.word	0x20000120

08000a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
  }

  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f003 fb7e 	bl	80041d8 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	2000008c 	.word	0x2000008c
 8000b10:	200002b8 	.word	0x200002b8

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b62:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b64:	4a2b      	ldr	r2, [pc, #172]	@ (8000c14 <MX_TIM3_Init+0xdc>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b68:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b6a:	2263      	movs	r2, #99	@ 0x63
 8000b6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b74:	4b26      	ldr	r3, [pc, #152]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b88:	4821      	ldr	r0, [pc, #132]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000b8a:	f001 f9e3 	bl	8001f54 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000b94:	f7ff fec4 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481a      	ldr	r0, [pc, #104]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000ba6:	f001 fd7f 	bl	80026a8 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000bb0:	f7ff feb6 	bl	8000920 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bb4:	4816      	ldr	r0, [pc, #88]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000bb6:	f001 fa77 	bl	80020a8 <HAL_TIM_IC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f7ff feae 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000bd4:	f002 f900 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000bde:	f7ff fe9f 	bl	8000920 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000be6:	2301      	movs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_TIM3_Init+0xd8>)
 8000bfa:	f001 fcb9 	bl	8002570 <HAL_TIM_IC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c04:	f7ff fe8c 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000090 	.word	0x20000090
 8000c14:	40000400 	.word	0x40000400

08000c18 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c5c <MX_TIM11_Init+0x44>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c34:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_TIM11_Init+0x40>)
 8000c44:	f001 f986 	bl	8001f54 <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c4e:	f7ff fe67 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000d8 	.word	0x200000d8
 8000c5c:	40014800 	.word	0x40014800

08000c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <HAL_TIM_Base_MspInit+0xbc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d134      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a25      	ldr	r2, [pc, #148]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4813      	ldr	r0, [pc, #76]	@ (8000d24 <HAL_TIM_Base_MspInit+0xc4>)
 8000cd6:	f000 fb07 	bl	80012e8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	201d      	movs	r0, #29
 8000ce0:	f000 fa39 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ce4:	201d      	movs	r0, #29
 8000ce6:	f000 fa52 	bl	800118e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000cea:	e012      	b.n	8000d12 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM11)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_TIM_Base_MspInit+0xc8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_TIM_Base_MspInit+0xc0>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40000400 	.word	0x40000400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40014800 	.word	0x40014800

08000d2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_USART2_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_USART2_UART_Init+0x4c>)
 8000d64:	f002 f8ba 	bl	8002edc <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f7ff fdd7 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000120 	.word	0x20000120
 8000d7c:	40004400 	.word	0x40004400

08000d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <HAL_UART_MspInit+0x94>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d133      	bne.n	8000e0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <HAL_UART_MspInit+0x98>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <HAL_UART_MspInit+0x98>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_UART_MspInit+0x98>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_UART_MspInit+0x98>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <HAL_UART_MspInit+0x98>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_UART_MspInit+0x98>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dea:	2307      	movs	r3, #7
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <HAL_UART_MspInit+0x9c>)
 8000df6:	f000 fa77 	bl	80012e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2026      	movs	r0, #38	@ 0x26
 8000e00:	f000 f9a9 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e04:	2026      	movs	r0, #38	@ 0x26
 8000e06:	f000 f9c2 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e24:	f7ff fe76 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 f9c9 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fcd1 	bl	80007f8 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e64:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8000e68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e6c:	200002b8 	.word	0x200002b8

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f94f 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fd40 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f967 	bl	80011aa <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef4:	f000 f92f 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000168 	.word	0x20000168

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000168 	.word	0x20000168

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	@ (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff3e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa2 	bl	80010fc <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff feb6 	bl	8000f40 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d008      	beq.n	80011f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e052      	b.n	800129a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0216 	bic.w	r2, r2, #22
 8001202:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001212:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <HAL_DMA_Abort+0x62>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0208 	bic.w	r2, r2, #8
 8001232:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001244:	e013      	b.n	800126e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001246:	f7ff fe7b 	bl	8000f40 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b05      	cmp	r3, #5
 8001252:	d90c      	bls.n	800126e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2220      	movs	r2, #32
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e015      	b.n	800129a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e4      	bne.n	8001246 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001280:	223f      	movs	r2, #63	@ 0x3f
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d004      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e00c      	b.n	80012da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2205      	movs	r2, #5
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e159      	b.n	80015b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8148 	bne.w	80015b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a2 	beq.w	80015b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b57      	ldr	r3, [pc, #348]	@ (80015d0 <HAL_GPIO_Init+0x2e8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a56      	ldr	r2, [pc, #344]	@ (80015d0 <HAL_GPIO_Init+0x2e8>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b54      	ldr	r3, [pc, #336]	@ (80015d0 <HAL_GPIO_Init+0x2e8>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <HAL_GPIO_Init+0x2ec>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_GPIO_Init+0x2f0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x202>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a48      	ldr	r2, [pc, #288]	@ (80015dc <HAL_GPIO_Init+0x2f4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x1fe>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a47      	ldr	r2, [pc, #284]	@ (80015e0 <HAL_GPIO_Init+0x2f8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x1fa>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a46      	ldr	r2, [pc, #280]	@ (80015e4 <HAL_GPIO_Init+0x2fc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x1f6>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a45      	ldr	r2, [pc, #276]	@ (80015e8 <HAL_GPIO_Init+0x300>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x1f2>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014da:	2307      	movs	r3, #7
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014ea:	2300      	movs	r3, #0
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fc:	4935      	ldr	r1, [pc, #212]	@ (80015d4 <HAL_GPIO_Init+0x2ec>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_GPIO_Init+0x304>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152e:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <HAL_GPIO_Init+0x304>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001534:	4b2d      	ldr	r3, [pc, #180]	@ (80015ec <HAL_GPIO_Init+0x304>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001558:	4a24      	ldr	r2, [pc, #144]	@ (80015ec <HAL_GPIO_Init+0x304>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155e:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <HAL_GPIO_Init+0x304>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001582:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <HAL_GPIO_Init+0x304>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_GPIO_Init+0x304>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ac:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <HAL_GPIO_Init+0x304>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	f67f aea2 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3724      	adds	r7, #36	@ 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800160c:	e003      	b.n	8001616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e267      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d075      	beq.n	800172e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001642:	4b88      	ldr	r3, [pc, #544]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d00c      	beq.n	8001668 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164e:	4b85      	ldr	r3, [pc, #532]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001656:	2b08      	cmp	r3, #8
 8001658:	d112      	bne.n	8001680 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165a:	4b82      	ldr	r3, [pc, #520]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001666:	d10b      	bne.n	8001680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b7e      	ldr	r3, [pc, #504]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d05b      	beq.n	800172c <HAL_RCC_OscConfig+0x108>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d157      	bne.n	800172c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e242      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001688:	d106      	bne.n	8001698 <HAL_RCC_OscConfig+0x74>
 800168a:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a75      	ldr	r2, [pc, #468]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0xb0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x98>
 80016a2:	4b70      	ldr	r3, [pc, #448]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0xb0>
 80016bc:	4b69      	ldr	r3, [pc, #420]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a68      	ldr	r2, [pc, #416]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b66      	ldr	r3, [pc, #408]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a65      	ldr	r2, [pc, #404]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc30 	bl	8000f40 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fc2c 	bl	8000f40 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	@ 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e207      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0xc0>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fc1c 	bl	8000f40 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fc18 	bl	8000f40 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1f3      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0xe8>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d063      	beq.n	8001802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800173a:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001746:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800174e:	2b08      	cmp	r3, #8
 8001750:	d11c      	bne.n	800178c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001752:	4b44      	ldr	r3, [pc, #272]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x152>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e1c7      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4937      	ldr	r1, [pc, #220]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	e03a      	b.n	8001802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x244>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff fbd1 	bl	8000f40 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a2:	f7ff fbcd 	bl	8000f40 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1a8      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4925      	ldr	r1, [pc, #148]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e015      	b.n	8001802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d6:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <HAL_RCC_OscConfig+0x244>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fbb0 	bl	8000f40 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fbac 	bl	8000f40 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e187      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d036      	beq.n	800187c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_RCC_OscConfig+0x248>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff fb90 	bl	8000f40 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff fb8c 	bl	8000f40 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e167      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCC_OscConfig+0x240>)
 8001838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x200>
 8001842:	e01b      	b.n	800187c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_RCC_OscConfig+0x248>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb79 	bl	8000f40 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	e00e      	b.n	8001870 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fb75 	bl	8000f40 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d907      	bls.n	8001870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e150      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
 8001864:	40023800 	.word	0x40023800
 8001868:	42470000 	.word	0x42470000
 800186c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ea      	bne.n	8001852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8097 	beq.w	80019b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b81      	ldr	r3, [pc, #516]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10f      	bne.n	80018ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b77      	ldr	r3, [pc, #476]	@ (8001a98 <HAL_RCC_OscConfig+0x474>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b74      	ldr	r3, [pc, #464]	@ (8001a98 <HAL_RCC_OscConfig+0x474>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a73      	ldr	r2, [pc, #460]	@ (8001a98 <HAL_RCC_OscConfig+0x474>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fb35 	bl	8000f40 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff fb31 	bl	8000f40 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e10c      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <HAL_RCC_OscConfig+0x474>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x2ea>
 8001900:	4b64      	ldr	r3, [pc, #400]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001904:	4a63      	ldr	r2, [pc, #396]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	@ 0x70
 800190c:	e01c      	b.n	8001948 <HAL_RCC_OscConfig+0x324>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x30c>
 8001916:	4b5f      	ldr	r3, [pc, #380]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6713      	str	r3, [r2, #112]	@ 0x70
 8001922:	4b5c      	ldr	r3, [pc, #368]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001926:	4a5b      	ldr	r2, [pc, #364]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	@ 0x70
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x324>
 8001930:	4b58      	ldr	r3, [pc, #352]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001934:	4a57      	ldr	r2, [pc, #348]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	@ 0x70
 800193c:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001940:	4a54      	ldr	r2, [pc, #336]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001942:	f023 0304 	bic.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff faf6 	bl	8000f40 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff faf2 	bl	8000f40 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0cb      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196e:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0ee      	beq.n	8001958 <HAL_RCC_OscConfig+0x334>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff fae0 	bl	8000f40 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff fadc 	bl	8000f40 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0b5      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ee      	bne.n	8001984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b39      	ldr	r3, [pc, #228]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	4a38      	ldr	r2, [pc, #224]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80019b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a1 	beq.w	8001b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c2:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d05c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d141      	bne.n	8001a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <HAL_RCC_OscConfig+0x478>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fab0 	bl	8000f40 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff faac 	bl	8000f40 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e087      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	061b      	lsls	r3, r3, #24
 8001a26:	491b      	ldr	r1, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x478>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fa85 	bl	8000f40 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff fa81 	bl	8000f40 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e05c      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x416>
 8001a58:	e054      	b.n	8001b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_RCC_OscConfig+0x478>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fa6e 	bl	8000f40 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff fa6a 	bl	8000f40 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e045      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x444>
 8001a86:	e03d      	b.n	8001b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e038      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x4ec>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d028      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d121      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d11a      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d111      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0cc      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b68      	ldr	r3, [pc, #416]	@ (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d90c      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b65      	ldr	r3, [pc, #404]	@ (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	@ (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a52      	ldr	r2, [pc, #328]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d044      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e06f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e067      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4934      	ldr	r1, [pc, #208]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f99c 	bl	8000f40 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f998 	bl	8000f40 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e04f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d20c      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	490a      	ldr	r1, [pc, #40]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f8fc 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023c00 	.word	0x40023c00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08004d94 	.word	0x08004d94
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce4:	b094      	sub	sp, #80	@ 0x50
 8001ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf8:	4b79      	ldr	r3, [pc, #484]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d00d      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x40>
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	f200 80e1 	bhi.w	8001ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x34>
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d12:	e0db      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b73      	ldr	r3, [pc, #460]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d18:	e0db      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1a:	4b73      	ldr	r3, [pc, #460]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d1e:	e0d8      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d063      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d52:	4622      	mov	r2, r4
 8001d54:	462b      	mov	r3, r5
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	0159      	lsls	r1, r3, #5
 8001d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d64:	0150      	lsls	r0, r2, #5
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	1a51      	subs	r1, r2, r1
 8001d6e:	6139      	str	r1, [r7, #16]
 8001d70:	4629      	mov	r1, r5
 8001d72:	eb63 0301 	sbc.w	r3, r3, r1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d84:	4659      	mov	r1, fp
 8001d86:	018b      	lsls	r3, r1, #6
 8001d88:	4651      	mov	r1, sl
 8001d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8e:	4651      	mov	r1, sl
 8001d90:	018a      	lsls	r2, r1, #6
 8001d92:	4651      	mov	r1, sl
 8001d94:	ebb2 0801 	subs.w	r8, r2, r1
 8001d98:	4659      	mov	r1, fp
 8001d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db2:	4690      	mov	r8, r2
 8001db4:	4699      	mov	r9, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	eb18 0303 	adds.w	r3, r8, r3
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	462b      	mov	r3, r5
 8001dc0:	eb49 0303 	adc.w	r3, r9, r3
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	024b      	lsls	r3, r1, #9
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ddc:	4621      	mov	r1, r4
 8001dde:	024a      	lsls	r2, r1, #9
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de6:	2200      	movs	r2, #0
 8001de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001df0:	f7fe fa46 	bl	8000280 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dfc:	e058      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	4b38      	ldr	r3, [pc, #224]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	2200      	movs	r2, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	4611      	mov	r1, r2
 8001e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e18:	4642      	mov	r2, r8
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	0159      	lsls	r1, r3, #5
 8001e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2a:	0150      	lsls	r0, r2, #5
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4641      	mov	r1, r8
 8001e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e36:	4649      	mov	r1, r9
 8001e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e50:	ebb2 040a 	subs.w	r4, r2, sl
 8001e54:	eb63 050b 	sbc.w	r5, r3, fp
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	00eb      	lsls	r3, r5, #3
 8001e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e66:	00e2      	lsls	r2, r4, #3
 8001e68:	4614      	mov	r4, r2
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	4643      	mov	r3, r8
 8001e6e:	18e3      	adds	r3, r4, r3
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	464b      	mov	r3, r9
 8001e74:	eb45 0303 	adc.w	r3, r5, r3
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e86:	4629      	mov	r1, r5
 8001e88:	028b      	lsls	r3, r1, #10
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e90:	4621      	mov	r1, r4
 8001e92:	028a      	lsls	r2, r1, #10
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	61fa      	str	r2, [r7, #28]
 8001ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea4:	f7fe f9ec 	bl	8000280 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ece:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3750      	adds	r7, #80	@ 0x50
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200

08001eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000

08001f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f08:	f7ff fff0 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0a9b      	lsrs	r3, r3, #10
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4903      	ldr	r1, [pc, #12]	@ (8001f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	08004da4 	.word	0x08004da4

08001f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f30:	f7ff ffdc 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0b5b      	lsrs	r3, r3, #13
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4903      	ldr	r1, [pc, #12]	@ (8001f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	08004da4 	.word	0x08004da4

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e041      	b.n	8001fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fe70 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 fcbc 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d001      	beq.n	800200c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e03c      	b.n	8002086 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <HAL_TIM_Base_Start+0xa0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d018      	beq.n	8002050 <HAL_TIM_Base_Start+0x5c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002026:	d013      	beq.n	8002050 <HAL_TIM_Base_Start+0x5c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1a      	ldr	r2, [pc, #104]	@ (8002098 <HAL_TIM_Base_Start+0xa4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00e      	beq.n	8002050 <HAL_TIM_Base_Start+0x5c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a19      	ldr	r2, [pc, #100]	@ (800209c <HAL_TIM_Base_Start+0xa8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_TIM_Base_Start+0x5c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a17      	ldr	r2, [pc, #92]	@ (80020a0 <HAL_TIM_Base_Start+0xac>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_TIM_Base_Start+0x5c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a16      	ldr	r2, [pc, #88]	@ (80020a4 <HAL_TIM_Base_Start+0xb0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d111      	bne.n	8002074 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b06      	cmp	r3, #6
 8002060:	d010      	beq.n	8002084 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002072:	e007      	b.n	8002084 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010000 	.word	0x40010000
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800
 80020a0:	40000c00 	.word	0x40000c00
 80020a4:	40014000 	.word	0x40014000

080020a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e041      	b.n	800213e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f839 	bl	8002146 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f000 fc12 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <HAL_TIM_IC_Start_IT+0x1e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e013      	b.n	80021a2 <HAL_TIM_IC_Start_IT+0x46>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d104      	bne.n	800218a <HAL_TIM_IC_Start_IT+0x2e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e00b      	b.n	80021a2 <HAL_TIM_IC_Start_IT+0x46>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d104      	bne.n	800219a <HAL_TIM_IC_Start_IT+0x3e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e003      	b.n	80021a2 <HAL_TIM_IC_Start_IT+0x46>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <HAL_TIM_IC_Start_IT+0x58>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e013      	b.n	80021dc <HAL_TIM_IC_Start_IT+0x80>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d104      	bne.n	80021c4 <HAL_TIM_IC_Start_IT+0x68>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e00b      	b.n	80021dc <HAL_TIM_IC_Start_IT+0x80>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d104      	bne.n	80021d4 <HAL_TIM_IC_Start_IT+0x78>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e003      	b.n	80021dc <HAL_TIM_IC_Start_IT+0x80>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d102      	bne.n	80021ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0c2      	b.n	8002374 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_IC_Start_IT+0xa2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021fc:	e013      	b.n	8002226 <HAL_TIM_IC_Start_IT+0xca>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d104      	bne.n	800220e <HAL_TIM_IC_Start_IT+0xb2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800220c:	e00b      	b.n	8002226 <HAL_TIM_IC_Start_IT+0xca>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d104      	bne.n	800221e <HAL_TIM_IC_Start_IT+0xc2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800221c:	e003      	b.n	8002226 <HAL_TIM_IC_Start_IT+0xca>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_TIM_IC_Start_IT+0xda>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002234:	e013      	b.n	800225e <HAL_TIM_IC_Start_IT+0x102>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d104      	bne.n	8002246 <HAL_TIM_IC_Start_IT+0xea>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002244:	e00b      	b.n	800225e <HAL_TIM_IC_Start_IT+0x102>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d104      	bne.n	8002256 <HAL_TIM_IC_Start_IT+0xfa>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002254:	e003      	b.n	800225e <HAL_TIM_IC_Start_IT+0x102>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d841      	bhi.n	80022e8 <HAL_TIM_IC_Start_IT+0x18c>
 8002264:	a201      	add	r2, pc, #4	@ (adr r2, 800226c <HAL_TIM_IC_Start_IT+0x110>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	080022a1 	.word	0x080022a1
 8002270:	080022e9 	.word	0x080022e9
 8002274:	080022e9 	.word	0x080022e9
 8002278:	080022e9 	.word	0x080022e9
 800227c:	080022b3 	.word	0x080022b3
 8002280:	080022e9 	.word	0x080022e9
 8002284:	080022e9 	.word	0x080022e9
 8002288:	080022e9 	.word	0x080022e9
 800228c:	080022c5 	.word	0x080022c5
 8002290:	080022e9 	.word	0x080022e9
 8002294:	080022e9 	.word	0x080022e9
 8002298:	080022e9 	.word	0x080022e9
 800229c:	080022d7 	.word	0x080022d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0202 	orr.w	r2, r2, #2
 80022ae:	60da      	str	r2, [r3, #12]
      break;
 80022b0:	e01d      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0204 	orr.w	r2, r2, #4
 80022c0:	60da      	str	r2, [r3, #12]
      break;
 80022c2:	e014      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0208 	orr.w	r2, r2, #8
 80022d2:	60da      	str	r2, [r3, #12]
      break;
 80022d4:	e00b      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0210 	orr.w	r2, r2, #16
 80022e4:	60da      	str	r2, [r3, #12]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d13e      	bne.n	8002372 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fd45 	bl	8002d8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_TIM_IC_Start_IT+0x220>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d018      	beq.n	800233e <HAL_TIM_IC_Start_IT+0x1e2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d013      	beq.n	800233e <HAL_TIM_IC_Start_IT+0x1e2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <HAL_TIM_IC_Start_IT+0x224>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_TIM_IC_Start_IT+0x1e2>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <HAL_TIM_IC_Start_IT+0x228>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_TIM_IC_Start_IT+0x1e2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <HAL_TIM_IC_Start_IT+0x22c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_TIM_IC_Start_IT+0x1e2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <HAL_TIM_IC_Start_IT+0x230>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d111      	bne.n	8002362 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b06      	cmp	r3, #6
 800234e:	d010      	beq.n	8002372 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002360:	e007      	b.n	8002372 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010000 	.word	0x40010000
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40000c00 	.word	0x40000c00
 800238c:	40014000 	.word	0x40014000

08002390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d020      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0202 	mvn.w	r2, #2
 80023c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe f984 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa76 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fa7d 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0204 	mvn.w	r2, #4
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe f95e 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa50 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fa57 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d020      	beq.n	800248c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0208 	mvn.w	r2, #8
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2204      	movs	r2, #4
 8002462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe f938 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fa2a 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fa31 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d020      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0210 	mvn.w	r2, #16
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2208      	movs	r2, #8
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe f912 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa04 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fa0b 	bl	80028e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00c      	beq.n	80024fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0201 	mvn.w	r2, #1
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f9e2 	bl	80028c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00c      	beq.n	8002520 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fcd4 	bl	8002ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9dc 	bl	80028fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0220 	mvn.w	r2, #32
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fca6 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_TIM_IC_ConfigChannel+0x1e>
 800258a:	2302      	movs	r3, #2
 800258c:	e088      	b.n	80026a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80025ac:	f000 fa36 	bl	8002a1c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 020c 	bic.w	r2, r2, #12
 80025be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	619a      	str	r2, [r3, #24]
 80025d2:	e060      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d11c      	bne.n	8002614 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80025ea:	f000 faae 	bl	8002b4a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6999      	ldr	r1, [r3, #24]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
 8002612:	e040      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11b      	bne.n	8002652 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800262a:	f000 fafb 	bl	8002c24 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020c 	bic.w	r2, r2, #12
 800263c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69d9      	ldr	r1, [r3, #28]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	61da      	str	r2, [r3, #28]
 8002650:	e021      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d11c      	bne.n	8002692 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002668:	f000 fb18 	bl	8002c9c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800267a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69d9      	ldr	r1, [r3, #28]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	021a      	lsls	r2, r3, #8
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	61da      	str	r2, [r3, #28]
 8002690:	e001      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_ConfigClockSource+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0b4      	b.n	800282e <HAL_TIM_ConfigClockSource+0x186>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fc:	d03e      	beq.n	800277c <HAL_TIM_ConfigClockSource+0xd4>
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002702:	f200 8087 	bhi.w	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270a:	f000 8086 	beq.w	800281a <HAL_TIM_ConfigClockSource+0x172>
 800270e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002712:	d87f      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b70      	cmp	r3, #112	@ 0x70
 8002716:	d01a      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xa6>
 8002718:	2b70      	cmp	r3, #112	@ 0x70
 800271a:	d87b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b60      	cmp	r3, #96	@ 0x60
 800271e:	d050      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002720:	2b60      	cmp	r3, #96	@ 0x60
 8002722:	d877      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b50      	cmp	r3, #80	@ 0x50
 8002726:	d03c      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002728:	2b50      	cmp	r3, #80	@ 0x50
 800272a:	d873      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d058      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d86f      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b30      	cmp	r3, #48	@ 0x30
 8002736:	d064      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b30      	cmp	r3, #48	@ 0x30
 800273a:	d86b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d060      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d867      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d05c      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	2b10      	cmp	r3, #16
 800274a:	d05a      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	e062      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800275e:	f000 faf5 	bl	8002d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
      break;
 800277a:	e04f      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800278c:	f000 fade 	bl	8002d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800279e:	609a      	str	r2, [r3, #8]
      break;
 80027a0:	e03c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	461a      	mov	r2, r3
 80027b0:	f000 f99c 	bl	8002aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2150      	movs	r1, #80	@ 0x50
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 faab 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80027c0:	e02c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f9f8 	bl	8002bc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2160      	movs	r1, #96	@ 0x60
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fa9b 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e01c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f97c 	bl	8002aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2140      	movs	r1, #64	@ 0x40
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa8b 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002800:	e00c      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f000 fa82 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002812:	e003      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e000      	b.n	800281c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d831      	bhi.n	80028b0 <HAL_TIM_ReadCapturedValue+0x78>
 800284c:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <HAL_TIM_ReadCapturedValue+0x1c>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002889 	.word	0x08002889
 8002858:	080028b1 	.word	0x080028b1
 800285c:	080028b1 	.word	0x080028b1
 8002860:	080028b1 	.word	0x080028b1
 8002864:	08002893 	.word	0x08002893
 8002868:	080028b1 	.word	0x080028b1
 800286c:	080028b1 	.word	0x080028b1
 8002870:	080028b1 	.word	0x080028b1
 8002874:	0800289d 	.word	0x0800289d
 8002878:	080028b1 	.word	0x080028b1
 800287c:	080028b1 	.word	0x080028b1
 8002880:	080028b1 	.word	0x080028b1
 8002884:	080028a7 	.word	0x080028a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288e:	60fb      	str	r3, [r7, #12]

      break;
 8002890:	e00f      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	60fb      	str	r3, [r7, #12]

      break;
 800289a:	e00a      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a2:	60fb      	str	r3, [r7, #12]

      break;
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	60fb      	str	r3, [r7, #12]

      break;
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80028b0:	bf00      	nop
  }

  return tmpreg;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a37      	ldr	r2, [pc, #220]	@ (8002a00 <TIM_Base_SetConfig+0xf0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00f      	beq.n	8002948 <TIM_Base_SetConfig+0x38>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0x38>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <TIM_Base_SetConfig+0xf4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0x38>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a33      	ldr	r2, [pc, #204]	@ (8002a08 <TIM_Base_SetConfig+0xf8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0x38>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a32      	ldr	r2, [pc, #200]	@ (8002a0c <TIM_Base_SetConfig+0xfc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <TIM_Base_SetConfig+0xf0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01b      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002968:	d017      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a25      	ldr	r2, [pc, #148]	@ (8002a04 <TIM_Base_SetConfig+0xf4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a24      	ldr	r2, [pc, #144]	@ (8002a08 <TIM_Base_SetConfig+0xf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00f      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a23      	ldr	r2, [pc, #140]	@ (8002a0c <TIM_Base_SetConfig+0xfc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00b      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a22      	ldr	r2, [pc, #136]	@ (8002a10 <TIM_Base_SetConfig+0x100>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a21      	ldr	r2, [pc, #132]	@ (8002a14 <TIM_Base_SetConfig+0x104>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d003      	beq.n	800299a <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <TIM_Base_SetConfig+0x108>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d108      	bne.n	80029ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002a00 <TIM_Base_SetConfig+0xf0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d103      	bne.n	80029da <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	601a      	str	r2, [r3, #0]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800

08002a1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f023 0201 	bic.w	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a24      	ldr	r2, [pc, #144]	@ (8002ad8 <TIM_TI1_SetConfig+0xbc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <TIM_TI1_SetConfig+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a50:	d00f      	beq.n	8002a72 <TIM_TI1_SetConfig+0x56>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a21      	ldr	r2, [pc, #132]	@ (8002adc <TIM_TI1_SetConfig+0xc0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_TI1_SetConfig+0x56>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <TIM_TI1_SetConfig+0xc4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_TI1_SetConfig+0x56>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae4 <TIM_TI1_SetConfig+0xc8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_TI1_SetConfig+0x56>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae8 <TIM_TI1_SetConfig+0xcc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <TIM_TI1_SetConfig+0x5a>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <TIM_TI1_SetConfig+0x5c>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e003      	b.n	8002a96 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f023 030a 	bic.w	r3, r3, #10
 8002ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 030a 	and.w	r3, r3, #10
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40014000 	.word	0x40014000

08002aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 030a 	bic.w	r3, r3, #10
 8002b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0210 	bic.w	r2, r3, #16
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0210 	bic.w	r2, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	031b      	lsls	r3, r3, #12
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	621a      	str	r2, [r3, #32]
}
 8002c18:	bf00      	nop
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f023 0303 	bic.w	r3, r3, #3
 8002c50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	621a      	str	r2, [r3, #32]
}
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	031b      	lsls	r3, r3, #12
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002cee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	031b      	lsls	r3, r3, #12
 8002cf4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f043 0307 	orr.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2201      	movs	r2, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e050      	b.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d018      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3c:	d013      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a16      	ldr	r2, [pc, #88]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d009      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a15      	ldr	r2, [pc, #84]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a13      	ldr	r2, [pc, #76]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10c      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40014000 	.word	0x40014000

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd ff3c 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	@ 0x24
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd7f 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d175      	bne.n	8003088 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_UART_Transmit+0x2c>
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e06e      	b.n	800308a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	@ 0x21
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fba:	f7fd ffc1 	bl	8000f40 <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Transmit+0x6c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff0:	e02e      	b.n	8003050 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	@ 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fb1d 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03a      	b.n	800308a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3302      	adds	r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e007      	b.n	8003042 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cb      	bne.n	8002ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	@ 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fae9 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e006      	b.n	800308a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b0ba      	sub	sp, #232	@ 0xe8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_UART_IRQHandler+0x66>
 80030e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fbd7 	bl	80038a6 <UART_Receive_IT>
      return;
 80030f8:	e273      	b.n	80035e2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80de 	beq.w	80032c0 <HAL_UART_IRQHandler+0x22c>
 8003104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80d1 	beq.w	80032c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_UART_IRQHandler+0xae>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800312e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_UART_IRQHandler+0xd2>
 800314e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	f043 0202 	orr.w	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_UART_IRQHandler+0xf6>
 8003172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d011      	beq.n	80031ba <HAL_UART_IRQHandler+0x126>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	f043 0208 	orr.w	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 820a 	beq.w	80035d8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_UART_IRQHandler+0x14e>
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fb62 	bl	80038a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_UART_IRQHandler+0x17a>
 8003206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04f      	beq.n	80032ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa6d 	bl	80036ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321e:	2b40      	cmp	r3, #64	@ 0x40
 8003220:	d141      	bne.n	80032a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3314      	adds	r3, #20
 8003228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003238:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800323c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800324e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003252:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800325a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1d9      	bne.n	8003222 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d013      	beq.n	800329e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	4a8a      	ldr	r2, [pc, #552]	@ (80034a4 <HAL_UART_IRQHandler+0x410>)
 800327c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f80d 	bl	80012a2 <HAL_DMA_Abort_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003298:	4610      	mov	r0, r2
 800329a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	e00e      	b.n	80032bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9b6 	bl	8003610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e00a      	b.n	80032bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9b2 	bl	8003610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e006      	b.n	80032bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9ae 	bl	8003610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032ba:	e18d      	b.n	80035d8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032bc:	bf00      	nop
    return;
 80032be:	e18b      	b.n	80035d8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 8167 	bne.w	8003598 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8160 	beq.w	8003598 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8159 	beq.w	8003598 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003306:	2b40      	cmp	r3, #64	@ 0x40
 8003308:	f040 80ce 	bne.w	80034a8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003318:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a9 	beq.w	8003474 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800332a:	429a      	cmp	r2, r3
 800332c:	f080 80a2 	bcs.w	8003474 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003336:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003342:	f000 8088 	beq.w	8003456 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800335c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800337e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800338a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1d9      	bne.n	8003346 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e1      	bne.n	8003392 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003400:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e3      	bne.n	80033ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003426:	f023 0310 	bic.w	r3, r3, #16
 800342a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003438:	65ba      	str	r2, [r7, #88]	@ 0x58
 800343a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800343e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e3      	bne.n	8003414 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd feb6 	bl	80011c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003464:	b29b      	uxth	r3, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8d9 	bl	8003624 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003472:	e0b3      	b.n	80035dc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800347c:	429a      	cmp	r2, r3
 800347e:	f040 80ad 	bne.w	80035dc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348c:	f040 80a6 	bne.w	80035dc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8c1 	bl	8003624 <HAL_UARTEx_RxEventCallback>
      return;
 80034a2:	e09b      	b.n	80035dc <HAL_UART_IRQHandler+0x548>
 80034a4:	080037b5 	.word	0x080037b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 808e 	beq.w	80035e0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80034c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8089 	beq.w	80035e0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80034f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e3      	bne.n	80034ce <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	623b      	str	r3, [r7, #32]
   return(result);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800352a:	633a      	str	r2, [r7, #48]	@ 0x30
 800352c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e3      	bne.n	8003506 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	60fb      	str	r3, [r7, #12]
   return(result);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0310 	bic.w	r3, r3, #16
 8003562:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	617b      	str	r3, [r7, #20]
   return(result);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e3      	bne.n	800354c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800358a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f847 	bl	8003624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003596:	e023      	b.n	80035e0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_UART_IRQHandler+0x524>
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f910 	bl	80037d6 <UART_Transmit_IT>
    return;
 80035b6:	e014      	b.n	80035e2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_UART_IRQHandler+0x54e>
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f950 	bl	8003876 <UART_EndTransmit_IT>
    return;
 80035d6:	e004      	b.n	80035e2 <HAL_UART_IRQHandler+0x54e>
    return;
 80035d8:	bf00      	nop
 80035da:	e002      	b.n	80035e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <HAL_UART_IRQHandler+0x54e>
      return;
 80035e0:	bf00      	nop
  }
}
 80035e2:	37e8      	adds	r7, #232	@ 0xe8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	e03b      	b.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003654:	d037      	beq.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fd fc73 	bl	8000f40 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e03a      	b.n	80036e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d023      	beq.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b80      	cmp	r3, #128	@ 0x80
 8003682:	d020      	beq.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b40      	cmp	r3, #64	@ 0x40
 8003688:	d01d      	beq.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d116      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f81d 	bl	80036ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2208      	movs	r2, #8
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00f      	b.n	80036e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d0b4      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b095      	sub	sp, #84	@ 0x54
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800370c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003716:	643a      	str	r2, [r7, #64]	@ 0x40
 8003718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800371c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	61fb      	str	r3, [r7, #28]
   return(result);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800374a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800374c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	2b01      	cmp	r3, #1
 8003764:	d119      	bne.n	800379a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	60bb      	str	r3, [r7, #8]
   return(result);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 0310 	bic.w	r3, r3, #16
 800377c:	647b      	str	r3, [r7, #68]	@ 0x44
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003786:	61ba      	str	r2, [r7, #24]
 8003788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6979      	ldr	r1, [r7, #20]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	613b      	str	r3, [r7, #16]
   return(result);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037a8:	bf00      	nop
 80037aa:	3754      	adds	r7, #84	@ 0x54
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff21 	bl	8003610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b21      	cmp	r3, #33	@ 0x21
 80037e8:	d13e      	bne.n	8003868 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f2:	d114      	bne.n	800381e <UART_Transmit_IT+0x48>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d110      	bne.n	800381e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003810:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	621a      	str	r2, [r3, #32]
 800381c:	e008      	b.n	8003830 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6211      	str	r1, [r2, #32]
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4619      	mov	r1, r3
 800383e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003852:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003862:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fea6 	bl	80035e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	@ 0x30
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b22      	cmp	r3, #34	@ 0x22
 80038c0:	f040 80aa 	bne.w	8003a18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038cc:	d115      	bne.n	80038fa <UART_Receive_IT+0x54>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d111      	bne.n	80038fa <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	1c9a      	adds	r2, r3, #2
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f8:	e024      	b.n	8003944 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003908:	d007      	beq.n	800391a <UART_Receive_IT+0x74>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <UART_Receive_IT+0x82>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e008      	b.n	800393a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003934:	b2da      	uxtb	r2, r3
 8003936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003938:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29b      	uxth	r3, r3
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4619      	mov	r1, r3
 8003952:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003954:	2b00      	cmp	r3, #0
 8003956:	d15d      	bne.n	8003a14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0220 	bic.w	r2, r2, #32
 8003966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	2b01      	cmp	r3, #1
 800399c:	d135      	bne.n	8003a0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	613b      	str	r3, [r7, #16]
   return(result);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 0310 	bic.w	r3, r3, #16
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	623a      	str	r2, [r7, #32]
 80039c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	69f9      	ldr	r1, [r7, #28]
 80039ca:	6a3a      	ldr	r2, [r7, #32]
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e5      	bne.n	80039a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d10a      	bne.n	80039fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fe0e 	bl	8003624 <HAL_UARTEx_RxEventCallback>
 8003a08:	e002      	b.n	8003a10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fdf6 	bl	80035fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e002      	b.n	8003a1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3730      	adds	r7, #48	@ 0x30
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b0c0      	sub	sp, #256	@ 0x100
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	68d9      	ldr	r1, [r3, #12]
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	ea40 0301 	orr.w	r3, r0, r1
 8003a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	6999      	ldr	r1, [r3, #24]
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	ea40 0301 	orr.w	r3, r0, r1
 8003aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d005      	beq.n	8003ac4 <UART_SetConfig+0xa0>
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf4 <UART_SetConfig+0x2d0>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d104      	bne.n	8003ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe fa32 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8003ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003acc:	e003      	b.n	8003ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe fa19 	bl	8001f04 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	f040 810c 	bne.w	8003cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003af6:	4622      	mov	r2, r4
 8003af8:	462b      	mov	r3, r5
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003afe:	415b      	adcs	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b06:	4621      	mov	r1, r4
 8003b08:	eb12 0801 	adds.w	r8, r2, r1
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb43 0901 	adc.w	r9, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b26:	4690      	mov	r8, r2
 8003b28:	4699      	mov	r9, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb18 0303 	adds.w	r3, r8, r3
 8003b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b34:	462b      	mov	r3, r5
 8003b36:	eb49 0303 	adc.w	r3, r9, r3
 8003b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b52:	460b      	mov	r3, r1
 8003b54:	18db      	adds	r3, r3, r3
 8003b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b58:	4613      	mov	r3, r2
 8003b5a:	eb42 0303 	adc.w	r3, r2, r3
 8003b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b68:	f7fc fb8a 	bl	8000280 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011c      	lsls	r4, r3, #4
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b94:	415b      	adcs	r3, r3
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbc:	4692      	mov	sl, r2
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003be8:	460b      	mov	r3, r1
 8003bea:	18db      	adds	r3, r3, r3
 8003bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bee:	4613      	mov	r3, r2
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bfe:	f7fc fb3f 	bl	8000280 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2264      	movs	r2, #100	@ 0x64
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 2302 	umull	r2, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c2c:	441c      	add	r4, r3
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	18db      	adds	r3, r3, r3
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003caa:	4613      	mov	r3, r2
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cba:	f7fc fae1 	bl	8000280 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	@ 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	@ 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cec:	e106      	b.n	8003efc <UART_SetConfig+0x4d8>
 8003cee:	bf00      	nop
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d0e:	4642      	mov	r2, r8
 8003d10:	464b      	mov	r3, r9
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	6239      	str	r1, [r7, #32]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1854      	adds	r4, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb43 0501 	adc.w	r5, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d44:	464b      	mov	r3, r9
 8003d46:	eb45 0303 	adc.w	r3, r5, r3
 8003d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d74:	4621      	mov	r1, r4
 8003d76:	008a      	lsls	r2, r1, #2
 8003d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d7c:	f7fc fa80 	bl	8000280 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b60      	ldr	r3, [pc, #384]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011c      	lsls	r4, r3, #4
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	61b9      	str	r1, [r7, #24]
 8003da8:	415b      	adcs	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6139      	str	r1, [r7, #16]
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e08:	4649      	mov	r1, r9
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e12:	4641      	mov	r1, r8
 8003e14:	008a      	lsls	r2, r1, #2
 8003e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e1a:	f7fc fa31 	bl	8000280 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	4b38      	ldr	r3, [pc, #224]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e26:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2264      	movs	r2, #100	@ 0x64
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	@ 0x32
 8003e38:	4a33      	ldr	r2, [pc, #204]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	441c      	add	r4, r3
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	1891      	adds	r1, r2, r2
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	415b      	adcs	r3, r3
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e64:	4641      	mov	r1, r8
 8003e66:	1851      	adds	r1, r2, r1
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	4651      	mov	r1, sl
 8003e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e86:	4651      	mov	r1, sl
 8003e88:	00ca      	lsls	r2, r1, #3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4642      	mov	r2, r8
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e96:	464b      	mov	r3, r9
 8003e98:	460a      	mov	r2, r1
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003eb8:	4649      	mov	r1, r9
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	008a      	lsls	r2, r1, #2
 8003ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eca:	f7fc f9d9 	bl	8000280 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	@ 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	3332      	adds	r3, #50	@ 0x32
 8003ee6:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4422      	add	r2, r4
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <std>:
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	b510      	push	{r4, lr}
 8003f10:	4604      	mov	r4, r0
 8003f12:	e9c0 3300 	strd	r3, r3, [r0]
 8003f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f1a:	6083      	str	r3, [r0, #8]
 8003f1c:	8181      	strh	r1, [r0, #12]
 8003f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f20:	81c2      	strh	r2, [r0, #14]
 8003f22:	6183      	str	r3, [r0, #24]
 8003f24:	4619      	mov	r1, r3
 8003f26:	2208      	movs	r2, #8
 8003f28:	305c      	adds	r0, #92	@ 0x5c
 8003f2a:	f000 f906 	bl	800413a <memset>
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x58>)
 8003f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <std+0x5c>)
 8003f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <std+0x60>)
 8003f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <std+0x64>)
 8003f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <std+0x68>)
 8003f40:	6224      	str	r4, [r4, #32]
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d006      	beq.n	8003f54 <std+0x48>
 8003f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f4a:	4294      	cmp	r4, r2
 8003f4c:	d002      	beq.n	8003f54 <std+0x48>
 8003f4e:	33d0      	adds	r3, #208	@ 0xd0
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d105      	bne.n	8003f60 <std+0x54>
 8003f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5c:	f000 b966 	b.w	800422c <__retarget_lock_init_recursive>
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	bf00      	nop
 8003f64:	080040b5 	.word	0x080040b5
 8003f68:	080040d7 	.word	0x080040d7
 8003f6c:	0800410f 	.word	0x0800410f
 8003f70:	08004133 	.word	0x08004133
 8003f74:	2000016c 	.word	0x2000016c

08003f78 <stdio_exit_handler>:
 8003f78:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <stdio_exit_handler+0xc>)
 8003f7a:	4903      	ldr	r1, [pc, #12]	@ (8003f88 <stdio_exit_handler+0x10>)
 8003f7c:	4803      	ldr	r0, [pc, #12]	@ (8003f8c <stdio_exit_handler+0x14>)
 8003f7e:	f000 b869 	b.w	8004054 <_fwalk_sglue>
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	08004ac9 	.word	0x08004ac9
 8003f8c:	2000001c 	.word	0x2000001c

08003f90 <cleanup_stdio>:
 8003f90:	6841      	ldr	r1, [r0, #4]
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <cleanup_stdio+0x34>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	b510      	push	{r4, lr}
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d001      	beq.n	8003fa0 <cleanup_stdio+0x10>
 8003f9c:	f000 fd94 	bl	8004ac8 <_fflush_r>
 8003fa0:	68a1      	ldr	r1, [r4, #8]
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <cleanup_stdio+0x38>)
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <cleanup_stdio+0x1e>
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 fd8d 	bl	8004ac8 <_fflush_r>
 8003fae:	68e1      	ldr	r1, [r4, #12]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <cleanup_stdio+0x3c>)
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d004      	beq.n	8003fc0 <cleanup_stdio+0x30>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f000 bd84 	b.w	8004ac8 <_fflush_r>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000016c 	.word	0x2000016c
 8003fc8:	200001d4 	.word	0x200001d4
 8003fcc:	2000023c 	.word	0x2000023c

08003fd0 <global_stdio_init.part.0>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <global_stdio_init.part.0+0x30>)
 8003fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8004004 <global_stdio_init.part.0+0x34>)
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <global_stdio_init.part.0+0x38>)
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2104      	movs	r1, #4
 8003fe0:	f7ff ff94 	bl	8003f0c <std>
 8003fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2109      	movs	r1, #9
 8003fec:	f7ff ff8e 	bl	8003f0c <std>
 8003ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffa:	2112      	movs	r1, #18
 8003ffc:	f7ff bf86 	b.w	8003f0c <std>
 8004000:	200002a4 	.word	0x200002a4
 8004004:	2000016c 	.word	0x2000016c
 8004008:	08003f79 	.word	0x08003f79

0800400c <__sfp_lock_acquire>:
 800400c:	4801      	ldr	r0, [pc, #4]	@ (8004014 <__sfp_lock_acquire+0x8>)
 800400e:	f000 b90e 	b.w	800422e <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	200002ad 	.word	0x200002ad

08004018 <__sfp_lock_release>:
 8004018:	4801      	ldr	r0, [pc, #4]	@ (8004020 <__sfp_lock_release+0x8>)
 800401a:	f000 b909 	b.w	8004230 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	200002ad 	.word	0x200002ad

08004024 <__sinit>:
 8004024:	b510      	push	{r4, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	f7ff fff0 	bl	800400c <__sfp_lock_acquire>
 800402c:	6a23      	ldr	r3, [r4, #32]
 800402e:	b11b      	cbz	r3, 8004038 <__sinit+0x14>
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f7ff bff0 	b.w	8004018 <__sfp_lock_release>
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <__sinit+0x28>)
 800403a:	6223      	str	r3, [r4, #32]
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__sinit+0x2c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f5      	bne.n	8004030 <__sinit+0xc>
 8004044:	f7ff ffc4 	bl	8003fd0 <global_stdio_init.part.0>
 8004048:	e7f2      	b.n	8004030 <__sinit+0xc>
 800404a:	bf00      	nop
 800404c:	08003f91 	.word	0x08003f91
 8004050:	200002a4 	.word	0x200002a4

08004054 <_fwalk_sglue>:
 8004054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004058:	4607      	mov	r7, r0
 800405a:	4688      	mov	r8, r1
 800405c:	4614      	mov	r4, r2
 800405e:	2600      	movs	r6, #0
 8004060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004064:	f1b9 0901 	subs.w	r9, r9, #1
 8004068:	d505      	bpl.n	8004076 <_fwalk_sglue+0x22>
 800406a:	6824      	ldr	r4, [r4, #0]
 800406c:	2c00      	cmp	r4, #0
 800406e:	d1f7      	bne.n	8004060 <_fwalk_sglue+0xc>
 8004070:	4630      	mov	r0, r6
 8004072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004076:	89ab      	ldrh	r3, [r5, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d907      	bls.n	800408c <_fwalk_sglue+0x38>
 800407c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004080:	3301      	adds	r3, #1
 8004082:	d003      	beq.n	800408c <_fwalk_sglue+0x38>
 8004084:	4629      	mov	r1, r5
 8004086:	4638      	mov	r0, r7
 8004088:	47c0      	blx	r8
 800408a:	4306      	orrs	r6, r0
 800408c:	3568      	adds	r5, #104	@ 0x68
 800408e:	e7e9      	b.n	8004064 <_fwalk_sglue+0x10>

08004090 <iprintf>:
 8004090:	b40f      	push	{r0, r1, r2, r3}
 8004092:	b507      	push	{r0, r1, r2, lr}
 8004094:	4906      	ldr	r1, [pc, #24]	@ (80040b0 <iprintf+0x20>)
 8004096:	ab04      	add	r3, sp, #16
 8004098:	6808      	ldr	r0, [r1, #0]
 800409a:	f853 2b04 	ldr.w	r2, [r3], #4
 800409e:	6881      	ldr	r1, [r0, #8]
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	f000 f9e9 	bl	8004478 <_vfiprintf_r>
 80040a6:	b003      	add	sp, #12
 80040a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040ac:	b004      	add	sp, #16
 80040ae:	4770      	bx	lr
 80040b0:	20000018 	.word	0x20000018

080040b4 <__sread>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	460c      	mov	r4, r1
 80040b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040bc:	f000 f868 	bl	8004190 <_read_r>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	bfab      	itete	ge
 80040c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040c6:	89a3      	ldrhlt	r3, [r4, #12]
 80040c8:	181b      	addge	r3, r3, r0
 80040ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040ce:	bfac      	ite	ge
 80040d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040d2:	81a3      	strhlt	r3, [r4, #12]
 80040d4:	bd10      	pop	{r4, pc}

080040d6 <__swrite>:
 80040d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040da:	461f      	mov	r7, r3
 80040dc:	898b      	ldrh	r3, [r1, #12]
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	4605      	mov	r5, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	4616      	mov	r6, r2
 80040e6:	d505      	bpl.n	80040f4 <__swrite+0x1e>
 80040e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ec:	2302      	movs	r3, #2
 80040ee:	2200      	movs	r2, #0
 80040f0:	f000 f83c 	bl	800416c <_lseek_r>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	4632      	mov	r2, r6
 8004102:	463b      	mov	r3, r7
 8004104:	4628      	mov	r0, r5
 8004106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800410a:	f000 b853 	b.w	80041b4 <_write_r>

0800410e <__sseek>:
 800410e:	b510      	push	{r4, lr}
 8004110:	460c      	mov	r4, r1
 8004112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004116:	f000 f829 	bl	800416c <_lseek_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	bf15      	itete	ne
 8004120:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800412a:	81a3      	strheq	r3, [r4, #12]
 800412c:	bf18      	it	ne
 800412e:	81a3      	strhne	r3, [r4, #12]
 8004130:	bd10      	pop	{r4, pc}

08004132 <__sclose>:
 8004132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004136:	f000 b809 	b.w	800414c <_close_r>

0800413a <memset>:
 800413a:	4402      	add	r2, r0
 800413c:	4603      	mov	r3, r0
 800413e:	4293      	cmp	r3, r2
 8004140:	d100      	bne.n	8004144 <memset+0xa>
 8004142:	4770      	bx	lr
 8004144:	f803 1b01 	strb.w	r1, [r3], #1
 8004148:	e7f9      	b.n	800413e <memset+0x4>
	...

0800414c <_close_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d06      	ldr	r5, [pc, #24]	@ (8004168 <_close_r+0x1c>)
 8004150:	2300      	movs	r3, #0
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fc fc71 	bl	8000a3e <_close>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_close_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_close_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	200002a8 	.word	0x200002a8

0800416c <_lseek_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	@ (800418c <_lseek_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fc86 	bl	8000a8c <_lseek>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_lseek_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_lseek_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	200002a8 	.word	0x200002a8

08004190 <_read_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d07      	ldr	r5, [pc, #28]	@ (80041b0 <_read_r+0x20>)
 8004194:	4604      	mov	r4, r0
 8004196:	4608      	mov	r0, r1
 8004198:	4611      	mov	r1, r2
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fc fc30 	bl	8000a04 <_read>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_read_r+0x1e>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_read_r+0x1e>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	200002a8 	.word	0x200002a8

080041b4 <_write_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	@ (80041d4 <_write_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fc fa4e 	bl	8000664 <_write>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_write_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_write_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	200002a8 	.word	0x200002a8

080041d8 <__errno>:
 80041d8:	4b01      	ldr	r3, [pc, #4]	@ (80041e0 <__errno+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000018 	.word	0x20000018

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4d0d      	ldr	r5, [pc, #52]	@ (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004220 <__libc_init_array+0x3c>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2600      	movs	r6, #0
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004228 <__libc_init_array+0x44>)
 80041f8:	f000 fdb6 	bl	8004d68 <_init>
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2600      	movs	r6, #0
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f855 3b04 	ldr.w	r3, [r5], #4
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f855 3b04 	ldr.w	r3, [r5], #4
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	08004de8 	.word	0x08004de8
 8004220:	08004de8 	.word	0x08004de8
 8004224:	08004de8 	.word	0x08004de8
 8004228:	08004dec 	.word	0x08004dec

0800422c <__retarget_lock_init_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_acquire_recursive>:
 800422e:	4770      	bx	lr

08004230 <__retarget_lock_release_recursive>:
 8004230:	4770      	bx	lr
	...

08004234 <_free_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	2900      	cmp	r1, #0
 800423a:	d041      	beq.n	80042c0 <_free_r+0x8c>
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f0c      	subs	r4, r1, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfb8      	it	lt
 8004246:	18e4      	addlt	r4, r4, r3
 8004248:	f000 f8e0 	bl	800440c <__malloc_lock>
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <_free_r+0x90>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	b933      	cbnz	r3, 8004260 <_free_r+0x2c>
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	6014      	str	r4, [r2, #0]
 8004256:	4628      	mov	r0, r5
 8004258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425c:	f000 b8dc 	b.w	8004418 <__malloc_unlock>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d908      	bls.n	8004276 <_free_r+0x42>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	1821      	adds	r1, r4, r0
 8004268:	428b      	cmp	r3, r1
 800426a:	bf01      	itttt	eq
 800426c:	6819      	ldreq	r1, [r3, #0]
 800426e:	685b      	ldreq	r3, [r3, #4]
 8004270:	1809      	addeq	r1, r1, r0
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	e7ed      	b.n	8004252 <_free_r+0x1e>
 8004276:	461a      	mov	r2, r3
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b10b      	cbz	r3, 8004280 <_free_r+0x4c>
 800427c:	42a3      	cmp	r3, r4
 800427e:	d9fa      	bls.n	8004276 <_free_r+0x42>
 8004280:	6811      	ldr	r1, [r2, #0]
 8004282:	1850      	adds	r0, r2, r1
 8004284:	42a0      	cmp	r0, r4
 8004286:	d10b      	bne.n	80042a0 <_free_r+0x6c>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	4401      	add	r1, r0
 800428c:	1850      	adds	r0, r2, r1
 800428e:	4283      	cmp	r3, r0
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	d1e0      	bne.n	8004256 <_free_r+0x22>
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	4408      	add	r0, r1
 800429c:	6010      	str	r0, [r2, #0]
 800429e:	e7da      	b.n	8004256 <_free_r+0x22>
 80042a0:	d902      	bls.n	80042a8 <_free_r+0x74>
 80042a2:	230c      	movs	r3, #12
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	e7d6      	b.n	8004256 <_free_r+0x22>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	1821      	adds	r1, r4, r0
 80042ac:	428b      	cmp	r3, r1
 80042ae:	bf04      	itt	eq
 80042b0:	6819      	ldreq	r1, [r3, #0]
 80042b2:	685b      	ldreq	r3, [r3, #4]
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	bf04      	itt	eq
 80042b8:	1809      	addeq	r1, r1, r0
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	6054      	str	r4, [r2, #4]
 80042be:	e7ca      	b.n	8004256 <_free_r+0x22>
 80042c0:	bd38      	pop	{r3, r4, r5, pc}
 80042c2:	bf00      	nop
 80042c4:	200002b4 	.word	0x200002b4

080042c8 <sbrk_aligned>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004308 <sbrk_aligned+0x40>)
 80042cc:	460c      	mov	r4, r1
 80042ce:	6831      	ldr	r1, [r6, #0]
 80042d0:	4605      	mov	r5, r0
 80042d2:	b911      	cbnz	r1, 80042da <sbrk_aligned+0x12>
 80042d4:	f000 fcb4 	bl	8004c40 <_sbrk_r>
 80042d8:	6030      	str	r0, [r6, #0]
 80042da:	4621      	mov	r1, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 fcaf 	bl	8004c40 <_sbrk_r>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d103      	bne.n	80042ee <sbrk_aligned+0x26>
 80042e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80042ea:	4620      	mov	r0, r4
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	1cc4      	adds	r4, r0, #3
 80042f0:	f024 0403 	bic.w	r4, r4, #3
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d0f8      	beq.n	80042ea <sbrk_aligned+0x22>
 80042f8:	1a21      	subs	r1, r4, r0
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 fca0 	bl	8004c40 <_sbrk_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d1f2      	bne.n	80042ea <sbrk_aligned+0x22>
 8004304:	e7ef      	b.n	80042e6 <sbrk_aligned+0x1e>
 8004306:	bf00      	nop
 8004308:	200002b0 	.word	0x200002b0

0800430c <_malloc_r>:
 800430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004310:	1ccd      	adds	r5, r1, #3
 8004312:	f025 0503 	bic.w	r5, r5, #3
 8004316:	3508      	adds	r5, #8
 8004318:	2d0c      	cmp	r5, #12
 800431a:	bf38      	it	cc
 800431c:	250c      	movcc	r5, #12
 800431e:	2d00      	cmp	r5, #0
 8004320:	4606      	mov	r6, r0
 8004322:	db01      	blt.n	8004328 <_malloc_r+0x1c>
 8004324:	42a9      	cmp	r1, r5
 8004326:	d904      	bls.n	8004332 <_malloc_r+0x26>
 8004328:	230c      	movs	r3, #12
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	2000      	movs	r0, #0
 800432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004408 <_malloc_r+0xfc>
 8004336:	f000 f869 	bl	800440c <__malloc_lock>
 800433a:	f8d8 3000 	ldr.w	r3, [r8]
 800433e:	461c      	mov	r4, r3
 8004340:	bb44      	cbnz	r4, 8004394 <_malloc_r+0x88>
 8004342:	4629      	mov	r1, r5
 8004344:	4630      	mov	r0, r6
 8004346:	f7ff ffbf 	bl	80042c8 <sbrk_aligned>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	4604      	mov	r4, r0
 800434e:	d158      	bne.n	8004402 <_malloc_r+0xf6>
 8004350:	f8d8 4000 	ldr.w	r4, [r8]
 8004354:	4627      	mov	r7, r4
 8004356:	2f00      	cmp	r7, #0
 8004358:	d143      	bne.n	80043e2 <_malloc_r+0xd6>
 800435a:	2c00      	cmp	r4, #0
 800435c:	d04b      	beq.n	80043f6 <_malloc_r+0xea>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	4639      	mov	r1, r7
 8004362:	4630      	mov	r0, r6
 8004364:	eb04 0903 	add.w	r9, r4, r3
 8004368:	f000 fc6a 	bl	8004c40 <_sbrk_r>
 800436c:	4581      	cmp	r9, r0
 800436e:	d142      	bne.n	80043f6 <_malloc_r+0xea>
 8004370:	6821      	ldr	r1, [r4, #0]
 8004372:	1a6d      	subs	r5, r5, r1
 8004374:	4629      	mov	r1, r5
 8004376:	4630      	mov	r0, r6
 8004378:	f7ff ffa6 	bl	80042c8 <sbrk_aligned>
 800437c:	3001      	adds	r0, #1
 800437e:	d03a      	beq.n	80043f6 <_malloc_r+0xea>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	442b      	add	r3, r5
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	f8d8 3000 	ldr.w	r3, [r8]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	bb62      	cbnz	r2, 80043e8 <_malloc_r+0xdc>
 800438e:	f8c8 7000 	str.w	r7, [r8]
 8004392:	e00f      	b.n	80043b4 <_malloc_r+0xa8>
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	1b52      	subs	r2, r2, r5
 8004398:	d420      	bmi.n	80043dc <_malloc_r+0xd0>
 800439a:	2a0b      	cmp	r2, #11
 800439c:	d917      	bls.n	80043ce <_malloc_r+0xc2>
 800439e:	1961      	adds	r1, r4, r5
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	6025      	str	r5, [r4, #0]
 80043a4:	bf18      	it	ne
 80043a6:	6059      	strne	r1, [r3, #4]
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	bf08      	it	eq
 80043ac:	f8c8 1000 	streq.w	r1, [r8]
 80043b0:	5162      	str	r2, [r4, r5]
 80043b2:	604b      	str	r3, [r1, #4]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f82f 	bl	8004418 <__malloc_unlock>
 80043ba:	f104 000b 	add.w	r0, r4, #11
 80043be:	1d23      	adds	r3, r4, #4
 80043c0:	f020 0007 	bic.w	r0, r0, #7
 80043c4:	1ac2      	subs	r2, r0, r3
 80043c6:	bf1c      	itt	ne
 80043c8:	1a1b      	subne	r3, r3, r0
 80043ca:	50a3      	strne	r3, [r4, r2]
 80043cc:	e7af      	b.n	800432e <_malloc_r+0x22>
 80043ce:	6862      	ldr	r2, [r4, #4]
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	bf0c      	ite	eq
 80043d4:	f8c8 2000 	streq.w	r2, [r8]
 80043d8:	605a      	strne	r2, [r3, #4]
 80043da:	e7eb      	b.n	80043b4 <_malloc_r+0xa8>
 80043dc:	4623      	mov	r3, r4
 80043de:	6864      	ldr	r4, [r4, #4]
 80043e0:	e7ae      	b.n	8004340 <_malloc_r+0x34>
 80043e2:	463c      	mov	r4, r7
 80043e4:	687f      	ldr	r7, [r7, #4]
 80043e6:	e7b6      	b.n	8004356 <_malloc_r+0x4a>
 80043e8:	461a      	mov	r2, r3
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d1fb      	bne.n	80043e8 <_malloc_r+0xdc>
 80043f0:	2300      	movs	r3, #0
 80043f2:	6053      	str	r3, [r2, #4]
 80043f4:	e7de      	b.n	80043b4 <_malloc_r+0xa8>
 80043f6:	230c      	movs	r3, #12
 80043f8:	6033      	str	r3, [r6, #0]
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 f80c 	bl	8004418 <__malloc_unlock>
 8004400:	e794      	b.n	800432c <_malloc_r+0x20>
 8004402:	6005      	str	r5, [r0, #0]
 8004404:	e7d6      	b.n	80043b4 <_malloc_r+0xa8>
 8004406:	bf00      	nop
 8004408:	200002b4 	.word	0x200002b4

0800440c <__malloc_lock>:
 800440c:	4801      	ldr	r0, [pc, #4]	@ (8004414 <__malloc_lock+0x8>)
 800440e:	f7ff bf0e 	b.w	800422e <__retarget_lock_acquire_recursive>
 8004412:	bf00      	nop
 8004414:	200002ac 	.word	0x200002ac

08004418 <__malloc_unlock>:
 8004418:	4801      	ldr	r0, [pc, #4]	@ (8004420 <__malloc_unlock+0x8>)
 800441a:	f7ff bf09 	b.w	8004230 <__retarget_lock_release_recursive>
 800441e:	bf00      	nop
 8004420:	200002ac 	.word	0x200002ac

08004424 <__sfputc_r>:
 8004424:	6893      	ldr	r3, [r2, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	b410      	push	{r4}
 800442c:	6093      	str	r3, [r2, #8]
 800442e:	da08      	bge.n	8004442 <__sfputc_r+0x1e>
 8004430:	6994      	ldr	r4, [r2, #24]
 8004432:	42a3      	cmp	r3, r4
 8004434:	db01      	blt.n	800443a <__sfputc_r+0x16>
 8004436:	290a      	cmp	r1, #10
 8004438:	d103      	bne.n	8004442 <__sfputc_r+0x1e>
 800443a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800443e:	f000 bb6b 	b.w	8004b18 <__swbuf_r>
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	1c58      	adds	r0, r3, #1
 8004446:	6010      	str	r0, [r2, #0]
 8004448:	7019      	strb	r1, [r3, #0]
 800444a:	4608      	mov	r0, r1
 800444c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004450:	4770      	bx	lr

08004452 <__sfputs_r>:
 8004452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004454:	4606      	mov	r6, r0
 8004456:	460f      	mov	r7, r1
 8004458:	4614      	mov	r4, r2
 800445a:	18d5      	adds	r5, r2, r3
 800445c:	42ac      	cmp	r4, r5
 800445e:	d101      	bne.n	8004464 <__sfputs_r+0x12>
 8004460:	2000      	movs	r0, #0
 8004462:	e007      	b.n	8004474 <__sfputs_r+0x22>
 8004464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004468:	463a      	mov	r2, r7
 800446a:	4630      	mov	r0, r6
 800446c:	f7ff ffda 	bl	8004424 <__sfputc_r>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d1f3      	bne.n	800445c <__sfputs_r+0xa>
 8004474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004478 <_vfiprintf_r>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	460d      	mov	r5, r1
 800447e:	b09d      	sub	sp, #116	@ 0x74
 8004480:	4614      	mov	r4, r2
 8004482:	4698      	mov	r8, r3
 8004484:	4606      	mov	r6, r0
 8004486:	b118      	cbz	r0, 8004490 <_vfiprintf_r+0x18>
 8004488:	6a03      	ldr	r3, [r0, #32]
 800448a:	b90b      	cbnz	r3, 8004490 <_vfiprintf_r+0x18>
 800448c:	f7ff fdca 	bl	8004024 <__sinit>
 8004490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004492:	07d9      	lsls	r1, r3, #31
 8004494:	d405      	bmi.n	80044a2 <_vfiprintf_r+0x2a>
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	059a      	lsls	r2, r3, #22
 800449a:	d402      	bmi.n	80044a2 <_vfiprintf_r+0x2a>
 800449c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800449e:	f7ff fec6 	bl	800422e <__retarget_lock_acquire_recursive>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	d501      	bpl.n	80044ac <_vfiprintf_r+0x34>
 80044a8:	692b      	ldr	r3, [r5, #16]
 80044aa:	b99b      	cbnz	r3, 80044d4 <_vfiprintf_r+0x5c>
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 fb70 	bl	8004b94 <__swsetup_r>
 80044b4:	b170      	cbz	r0, 80044d4 <_vfiprintf_r+0x5c>
 80044b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044b8:	07dc      	lsls	r4, r3, #31
 80044ba:	d504      	bpl.n	80044c6 <_vfiprintf_r+0x4e>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044c0:	b01d      	add	sp, #116	@ 0x74
 80044c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	0598      	lsls	r0, r3, #22
 80044ca:	d4f7      	bmi.n	80044bc <_vfiprintf_r+0x44>
 80044cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ce:	f7ff feaf 	bl	8004230 <__retarget_lock_release_recursive>
 80044d2:	e7f3      	b.n	80044bc <_vfiprintf_r+0x44>
 80044d4:	2300      	movs	r3, #0
 80044d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d8:	2320      	movs	r3, #32
 80044da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044de:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e2:	2330      	movs	r3, #48	@ 0x30
 80044e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004694 <_vfiprintf_r+0x21c>
 80044e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044ec:	f04f 0901 	mov.w	r9, #1
 80044f0:	4623      	mov	r3, r4
 80044f2:	469a      	mov	sl, r3
 80044f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f8:	b10a      	cbz	r2, 80044fe <_vfiprintf_r+0x86>
 80044fa:	2a25      	cmp	r2, #37	@ 0x25
 80044fc:	d1f9      	bne.n	80044f2 <_vfiprintf_r+0x7a>
 80044fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004502:	d00b      	beq.n	800451c <_vfiprintf_r+0xa4>
 8004504:	465b      	mov	r3, fp
 8004506:	4622      	mov	r2, r4
 8004508:	4629      	mov	r1, r5
 800450a:	4630      	mov	r0, r6
 800450c:	f7ff ffa1 	bl	8004452 <__sfputs_r>
 8004510:	3001      	adds	r0, #1
 8004512:	f000 80a7 	beq.w	8004664 <_vfiprintf_r+0x1ec>
 8004516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004518:	445a      	add	r2, fp
 800451a:	9209      	str	r2, [sp, #36]	@ 0x24
 800451c:	f89a 3000 	ldrb.w	r3, [sl]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 809f 	beq.w	8004664 <_vfiprintf_r+0x1ec>
 8004526:	2300      	movs	r3, #0
 8004528:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800452c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004530:	f10a 0a01 	add.w	sl, sl, #1
 8004534:	9304      	str	r3, [sp, #16]
 8004536:	9307      	str	r3, [sp, #28]
 8004538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800453c:	931a      	str	r3, [sp, #104]	@ 0x68
 800453e:	4654      	mov	r4, sl
 8004540:	2205      	movs	r2, #5
 8004542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004546:	4853      	ldr	r0, [pc, #332]	@ (8004694 <_vfiprintf_r+0x21c>)
 8004548:	f7fb fe4a 	bl	80001e0 <memchr>
 800454c:	9a04      	ldr	r2, [sp, #16]
 800454e:	b9d8      	cbnz	r0, 8004588 <_vfiprintf_r+0x110>
 8004550:	06d1      	lsls	r1, r2, #27
 8004552:	bf44      	itt	mi
 8004554:	2320      	movmi	r3, #32
 8004556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800455a:	0713      	lsls	r3, r2, #28
 800455c:	bf44      	itt	mi
 800455e:	232b      	movmi	r3, #43	@ 0x2b
 8004560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004564:	f89a 3000 	ldrb.w	r3, [sl]
 8004568:	2b2a      	cmp	r3, #42	@ 0x2a
 800456a:	d015      	beq.n	8004598 <_vfiprintf_r+0x120>
 800456c:	9a07      	ldr	r2, [sp, #28]
 800456e:	4654      	mov	r4, sl
 8004570:	2000      	movs	r0, #0
 8004572:	f04f 0c0a 	mov.w	ip, #10
 8004576:	4621      	mov	r1, r4
 8004578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800457c:	3b30      	subs	r3, #48	@ 0x30
 800457e:	2b09      	cmp	r3, #9
 8004580:	d94b      	bls.n	800461a <_vfiprintf_r+0x1a2>
 8004582:	b1b0      	cbz	r0, 80045b2 <_vfiprintf_r+0x13a>
 8004584:	9207      	str	r2, [sp, #28]
 8004586:	e014      	b.n	80045b2 <_vfiprintf_r+0x13a>
 8004588:	eba0 0308 	sub.w	r3, r0, r8
 800458c:	fa09 f303 	lsl.w	r3, r9, r3
 8004590:	4313      	orrs	r3, r2
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	46a2      	mov	sl, r4
 8004596:	e7d2      	b.n	800453e <_vfiprintf_r+0xc6>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	1d19      	adds	r1, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	9103      	str	r1, [sp, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bfbb      	ittet	lt
 80045a4:	425b      	neglt	r3, r3
 80045a6:	f042 0202 	orrlt.w	r2, r2, #2
 80045aa:	9307      	strge	r3, [sp, #28]
 80045ac:	9307      	strlt	r3, [sp, #28]
 80045ae:	bfb8      	it	lt
 80045b0:	9204      	strlt	r2, [sp, #16]
 80045b2:	7823      	ldrb	r3, [r4, #0]
 80045b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b6:	d10a      	bne.n	80045ce <_vfiprintf_r+0x156>
 80045b8:	7863      	ldrb	r3, [r4, #1]
 80045ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80045bc:	d132      	bne.n	8004624 <_vfiprintf_r+0x1ac>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	1d1a      	adds	r2, r3, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	9203      	str	r2, [sp, #12]
 80045c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045ca:	3402      	adds	r4, #2
 80045cc:	9305      	str	r3, [sp, #20]
 80045ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046a4 <_vfiprintf_r+0x22c>
 80045d2:	7821      	ldrb	r1, [r4, #0]
 80045d4:	2203      	movs	r2, #3
 80045d6:	4650      	mov	r0, sl
 80045d8:	f7fb fe02 	bl	80001e0 <memchr>
 80045dc:	b138      	cbz	r0, 80045ee <_vfiprintf_r+0x176>
 80045de:	9b04      	ldr	r3, [sp, #16]
 80045e0:	eba0 000a 	sub.w	r0, r0, sl
 80045e4:	2240      	movs	r2, #64	@ 0x40
 80045e6:	4082      	lsls	r2, r0
 80045e8:	4313      	orrs	r3, r2
 80045ea:	3401      	adds	r4, #1
 80045ec:	9304      	str	r3, [sp, #16]
 80045ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f2:	4829      	ldr	r0, [pc, #164]	@ (8004698 <_vfiprintf_r+0x220>)
 80045f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045f8:	2206      	movs	r2, #6
 80045fa:	f7fb fdf1 	bl	80001e0 <memchr>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d03f      	beq.n	8004682 <_vfiprintf_r+0x20a>
 8004602:	4b26      	ldr	r3, [pc, #152]	@ (800469c <_vfiprintf_r+0x224>)
 8004604:	bb1b      	cbnz	r3, 800464e <_vfiprintf_r+0x1d6>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	3307      	adds	r3, #7
 800460a:	f023 0307 	bic.w	r3, r3, #7
 800460e:	3308      	adds	r3, #8
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004614:	443b      	add	r3, r7
 8004616:	9309      	str	r3, [sp, #36]	@ 0x24
 8004618:	e76a      	b.n	80044f0 <_vfiprintf_r+0x78>
 800461a:	fb0c 3202 	mla	r2, ip, r2, r3
 800461e:	460c      	mov	r4, r1
 8004620:	2001      	movs	r0, #1
 8004622:	e7a8      	b.n	8004576 <_vfiprintf_r+0xfe>
 8004624:	2300      	movs	r3, #0
 8004626:	3401      	adds	r4, #1
 8004628:	9305      	str	r3, [sp, #20]
 800462a:	4619      	mov	r1, r3
 800462c:	f04f 0c0a 	mov.w	ip, #10
 8004630:	4620      	mov	r0, r4
 8004632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004636:	3a30      	subs	r2, #48	@ 0x30
 8004638:	2a09      	cmp	r2, #9
 800463a:	d903      	bls.n	8004644 <_vfiprintf_r+0x1cc>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0c6      	beq.n	80045ce <_vfiprintf_r+0x156>
 8004640:	9105      	str	r1, [sp, #20]
 8004642:	e7c4      	b.n	80045ce <_vfiprintf_r+0x156>
 8004644:	fb0c 2101 	mla	r1, ip, r1, r2
 8004648:	4604      	mov	r4, r0
 800464a:	2301      	movs	r3, #1
 800464c:	e7f0      	b.n	8004630 <_vfiprintf_r+0x1b8>
 800464e:	ab03      	add	r3, sp, #12
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	462a      	mov	r2, r5
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <_vfiprintf_r+0x228>)
 8004656:	a904      	add	r1, sp, #16
 8004658:	4630      	mov	r0, r6
 800465a:	f3af 8000 	nop.w
 800465e:	4607      	mov	r7, r0
 8004660:	1c78      	adds	r0, r7, #1
 8004662:	d1d6      	bne.n	8004612 <_vfiprintf_r+0x19a>
 8004664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004666:	07d9      	lsls	r1, r3, #31
 8004668:	d405      	bmi.n	8004676 <_vfiprintf_r+0x1fe>
 800466a:	89ab      	ldrh	r3, [r5, #12]
 800466c:	059a      	lsls	r2, r3, #22
 800466e:	d402      	bmi.n	8004676 <_vfiprintf_r+0x1fe>
 8004670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004672:	f7ff fddd 	bl	8004230 <__retarget_lock_release_recursive>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	065b      	lsls	r3, r3, #25
 800467a:	f53f af1f 	bmi.w	80044bc <_vfiprintf_r+0x44>
 800467e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004680:	e71e      	b.n	80044c0 <_vfiprintf_r+0x48>
 8004682:	ab03      	add	r3, sp, #12
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	462a      	mov	r2, r5
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <_vfiprintf_r+0x228>)
 800468a:	a904      	add	r1, sp, #16
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f879 	bl	8004784 <_printf_i>
 8004692:	e7e4      	b.n	800465e <_vfiprintf_r+0x1e6>
 8004694:	08004dac 	.word	0x08004dac
 8004698:	08004db6 	.word	0x08004db6
 800469c:	00000000 	.word	0x00000000
 80046a0:	08004453 	.word	0x08004453
 80046a4:	08004db2 	.word	0x08004db2

080046a8 <_printf_common>:
 80046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	4616      	mov	r6, r2
 80046ae:	4698      	mov	r8, r3
 80046b0:	688a      	ldr	r2, [r1, #8]
 80046b2:	690b      	ldr	r3, [r1, #16]
 80046b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bfb8      	it	lt
 80046bc:	4613      	movlt	r3, r2
 80046be:	6033      	str	r3, [r6, #0]
 80046c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046c4:	4607      	mov	r7, r0
 80046c6:	460c      	mov	r4, r1
 80046c8:	b10a      	cbz	r2, 80046ce <_printf_common+0x26>
 80046ca:	3301      	adds	r3, #1
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	0699      	lsls	r1, r3, #26
 80046d2:	bf42      	ittt	mi
 80046d4:	6833      	ldrmi	r3, [r6, #0]
 80046d6:	3302      	addmi	r3, #2
 80046d8:	6033      	strmi	r3, [r6, #0]
 80046da:	6825      	ldr	r5, [r4, #0]
 80046dc:	f015 0506 	ands.w	r5, r5, #6
 80046e0:	d106      	bne.n	80046f0 <_printf_common+0x48>
 80046e2:	f104 0a19 	add.w	sl, r4, #25
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	6832      	ldr	r2, [r6, #0]
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	42ab      	cmp	r3, r5
 80046ee:	dc26      	bgt.n	800473e <_printf_common+0x96>
 80046f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046f4:	6822      	ldr	r2, [r4, #0]
 80046f6:	3b00      	subs	r3, #0
 80046f8:	bf18      	it	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	0692      	lsls	r2, r2, #26
 80046fe:	d42b      	bmi.n	8004758 <_printf_common+0xb0>
 8004700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004704:	4641      	mov	r1, r8
 8004706:	4638      	mov	r0, r7
 8004708:	47c8      	blx	r9
 800470a:	3001      	adds	r0, #1
 800470c:	d01e      	beq.n	800474c <_printf_common+0xa4>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	6922      	ldr	r2, [r4, #16]
 8004712:	f003 0306 	and.w	r3, r3, #6
 8004716:	2b04      	cmp	r3, #4
 8004718:	bf02      	ittt	eq
 800471a:	68e5      	ldreq	r5, [r4, #12]
 800471c:	6833      	ldreq	r3, [r6, #0]
 800471e:	1aed      	subeq	r5, r5, r3
 8004720:	68a3      	ldr	r3, [r4, #8]
 8004722:	bf0c      	ite	eq
 8004724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004728:	2500      	movne	r5, #0
 800472a:	4293      	cmp	r3, r2
 800472c:	bfc4      	itt	gt
 800472e:	1a9b      	subgt	r3, r3, r2
 8004730:	18ed      	addgt	r5, r5, r3
 8004732:	2600      	movs	r6, #0
 8004734:	341a      	adds	r4, #26
 8004736:	42b5      	cmp	r5, r6
 8004738:	d11a      	bne.n	8004770 <_printf_common+0xc8>
 800473a:	2000      	movs	r0, #0
 800473c:	e008      	b.n	8004750 <_printf_common+0xa8>
 800473e:	2301      	movs	r3, #1
 8004740:	4652      	mov	r2, sl
 8004742:	4641      	mov	r1, r8
 8004744:	4638      	mov	r0, r7
 8004746:	47c8      	blx	r9
 8004748:	3001      	adds	r0, #1
 800474a:	d103      	bne.n	8004754 <_printf_common+0xac>
 800474c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004754:	3501      	adds	r5, #1
 8004756:	e7c6      	b.n	80046e6 <_printf_common+0x3e>
 8004758:	18e1      	adds	r1, r4, r3
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	2030      	movs	r0, #48	@ 0x30
 800475e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004762:	4422      	add	r2, r4
 8004764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800476c:	3302      	adds	r3, #2
 800476e:	e7c7      	b.n	8004700 <_printf_common+0x58>
 8004770:	2301      	movs	r3, #1
 8004772:	4622      	mov	r2, r4
 8004774:	4641      	mov	r1, r8
 8004776:	4638      	mov	r0, r7
 8004778:	47c8      	blx	r9
 800477a:	3001      	adds	r0, #1
 800477c:	d0e6      	beq.n	800474c <_printf_common+0xa4>
 800477e:	3601      	adds	r6, #1
 8004780:	e7d9      	b.n	8004736 <_printf_common+0x8e>
	...

08004784 <_printf_i>:
 8004784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	7e0f      	ldrb	r7, [r1, #24]
 800478a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800478c:	2f78      	cmp	r7, #120	@ 0x78
 800478e:	4691      	mov	r9, r2
 8004790:	4680      	mov	r8, r0
 8004792:	460c      	mov	r4, r1
 8004794:	469a      	mov	sl, r3
 8004796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800479a:	d807      	bhi.n	80047ac <_printf_i+0x28>
 800479c:	2f62      	cmp	r7, #98	@ 0x62
 800479e:	d80a      	bhi.n	80047b6 <_printf_i+0x32>
 80047a0:	2f00      	cmp	r7, #0
 80047a2:	f000 80d1 	beq.w	8004948 <_printf_i+0x1c4>
 80047a6:	2f58      	cmp	r7, #88	@ 0x58
 80047a8:	f000 80b8 	beq.w	800491c <_printf_i+0x198>
 80047ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047b4:	e03a      	b.n	800482c <_printf_i+0xa8>
 80047b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ba:	2b15      	cmp	r3, #21
 80047bc:	d8f6      	bhi.n	80047ac <_printf_i+0x28>
 80047be:	a101      	add	r1, pc, #4	@ (adr r1, 80047c4 <_printf_i+0x40>)
 80047c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c4:	0800481d 	.word	0x0800481d
 80047c8:	08004831 	.word	0x08004831
 80047cc:	080047ad 	.word	0x080047ad
 80047d0:	080047ad 	.word	0x080047ad
 80047d4:	080047ad 	.word	0x080047ad
 80047d8:	080047ad 	.word	0x080047ad
 80047dc:	08004831 	.word	0x08004831
 80047e0:	080047ad 	.word	0x080047ad
 80047e4:	080047ad 	.word	0x080047ad
 80047e8:	080047ad 	.word	0x080047ad
 80047ec:	080047ad 	.word	0x080047ad
 80047f0:	0800492f 	.word	0x0800492f
 80047f4:	0800485b 	.word	0x0800485b
 80047f8:	080048e9 	.word	0x080048e9
 80047fc:	080047ad 	.word	0x080047ad
 8004800:	080047ad 	.word	0x080047ad
 8004804:	08004951 	.word	0x08004951
 8004808:	080047ad 	.word	0x080047ad
 800480c:	0800485b 	.word	0x0800485b
 8004810:	080047ad 	.word	0x080047ad
 8004814:	080047ad 	.word	0x080047ad
 8004818:	080048f1 	.word	0x080048f1
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6032      	str	r2, [r6, #0]
 8004824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800482c:	2301      	movs	r3, #1
 800482e:	e09c      	b.n	800496a <_printf_i+0x1e6>
 8004830:	6833      	ldr	r3, [r6, #0]
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	1d19      	adds	r1, r3, #4
 8004836:	6031      	str	r1, [r6, #0]
 8004838:	0606      	lsls	r6, r0, #24
 800483a:	d501      	bpl.n	8004840 <_printf_i+0xbc>
 800483c:	681d      	ldr	r5, [r3, #0]
 800483e:	e003      	b.n	8004848 <_printf_i+0xc4>
 8004840:	0645      	lsls	r5, r0, #25
 8004842:	d5fb      	bpl.n	800483c <_printf_i+0xb8>
 8004844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004848:	2d00      	cmp	r5, #0
 800484a:	da03      	bge.n	8004854 <_printf_i+0xd0>
 800484c:	232d      	movs	r3, #45	@ 0x2d
 800484e:	426d      	negs	r5, r5
 8004850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004854:	4858      	ldr	r0, [pc, #352]	@ (80049b8 <_printf_i+0x234>)
 8004856:	230a      	movs	r3, #10
 8004858:	e011      	b.n	800487e <_printf_i+0xfa>
 800485a:	6821      	ldr	r1, [r4, #0]
 800485c:	6833      	ldr	r3, [r6, #0]
 800485e:	0608      	lsls	r0, r1, #24
 8004860:	f853 5b04 	ldr.w	r5, [r3], #4
 8004864:	d402      	bmi.n	800486c <_printf_i+0xe8>
 8004866:	0649      	lsls	r1, r1, #25
 8004868:	bf48      	it	mi
 800486a:	b2ad      	uxthmi	r5, r5
 800486c:	2f6f      	cmp	r7, #111	@ 0x6f
 800486e:	4852      	ldr	r0, [pc, #328]	@ (80049b8 <_printf_i+0x234>)
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	bf14      	ite	ne
 8004874:	230a      	movne	r3, #10
 8004876:	2308      	moveq	r3, #8
 8004878:	2100      	movs	r1, #0
 800487a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800487e:	6866      	ldr	r6, [r4, #4]
 8004880:	60a6      	str	r6, [r4, #8]
 8004882:	2e00      	cmp	r6, #0
 8004884:	db05      	blt.n	8004892 <_printf_i+0x10e>
 8004886:	6821      	ldr	r1, [r4, #0]
 8004888:	432e      	orrs	r6, r5
 800488a:	f021 0104 	bic.w	r1, r1, #4
 800488e:	6021      	str	r1, [r4, #0]
 8004890:	d04b      	beq.n	800492a <_printf_i+0x1a6>
 8004892:	4616      	mov	r6, r2
 8004894:	fbb5 f1f3 	udiv	r1, r5, r3
 8004898:	fb03 5711 	mls	r7, r3, r1, r5
 800489c:	5dc7      	ldrb	r7, [r0, r7]
 800489e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048a2:	462f      	mov	r7, r5
 80048a4:	42bb      	cmp	r3, r7
 80048a6:	460d      	mov	r5, r1
 80048a8:	d9f4      	bls.n	8004894 <_printf_i+0x110>
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d10b      	bne.n	80048c6 <_printf_i+0x142>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	07df      	lsls	r7, r3, #31
 80048b2:	d508      	bpl.n	80048c6 <_printf_i+0x142>
 80048b4:	6923      	ldr	r3, [r4, #16]
 80048b6:	6861      	ldr	r1, [r4, #4]
 80048b8:	4299      	cmp	r1, r3
 80048ba:	bfde      	ittt	le
 80048bc:	2330      	movle	r3, #48	@ 0x30
 80048be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048c6:	1b92      	subs	r2, r2, r6
 80048c8:	6122      	str	r2, [r4, #16]
 80048ca:	f8cd a000 	str.w	sl, [sp]
 80048ce:	464b      	mov	r3, r9
 80048d0:	aa03      	add	r2, sp, #12
 80048d2:	4621      	mov	r1, r4
 80048d4:	4640      	mov	r0, r8
 80048d6:	f7ff fee7 	bl	80046a8 <_printf_common>
 80048da:	3001      	adds	r0, #1
 80048dc:	d14a      	bne.n	8004974 <_printf_i+0x1f0>
 80048de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048e2:	b004      	add	sp, #16
 80048e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	f043 0320 	orr.w	r3, r3, #32
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	4832      	ldr	r0, [pc, #200]	@ (80049bc <_printf_i+0x238>)
 80048f2:	2778      	movs	r7, #120	@ 0x78
 80048f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	6831      	ldr	r1, [r6, #0]
 80048fc:	061f      	lsls	r7, r3, #24
 80048fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004902:	d402      	bmi.n	800490a <_printf_i+0x186>
 8004904:	065f      	lsls	r7, r3, #25
 8004906:	bf48      	it	mi
 8004908:	b2ad      	uxthmi	r5, r5
 800490a:	6031      	str	r1, [r6, #0]
 800490c:	07d9      	lsls	r1, r3, #31
 800490e:	bf44      	itt	mi
 8004910:	f043 0320 	orrmi.w	r3, r3, #32
 8004914:	6023      	strmi	r3, [r4, #0]
 8004916:	b11d      	cbz	r5, 8004920 <_printf_i+0x19c>
 8004918:	2310      	movs	r3, #16
 800491a:	e7ad      	b.n	8004878 <_printf_i+0xf4>
 800491c:	4826      	ldr	r0, [pc, #152]	@ (80049b8 <_printf_i+0x234>)
 800491e:	e7e9      	b.n	80048f4 <_printf_i+0x170>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	f023 0320 	bic.w	r3, r3, #32
 8004926:	6023      	str	r3, [r4, #0]
 8004928:	e7f6      	b.n	8004918 <_printf_i+0x194>
 800492a:	4616      	mov	r6, r2
 800492c:	e7bd      	b.n	80048aa <_printf_i+0x126>
 800492e:	6833      	ldr	r3, [r6, #0]
 8004930:	6825      	ldr	r5, [r4, #0]
 8004932:	6961      	ldr	r1, [r4, #20]
 8004934:	1d18      	adds	r0, r3, #4
 8004936:	6030      	str	r0, [r6, #0]
 8004938:	062e      	lsls	r6, r5, #24
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	d501      	bpl.n	8004942 <_printf_i+0x1be>
 800493e:	6019      	str	r1, [r3, #0]
 8004940:	e002      	b.n	8004948 <_printf_i+0x1c4>
 8004942:	0668      	lsls	r0, r5, #25
 8004944:	d5fb      	bpl.n	800493e <_printf_i+0x1ba>
 8004946:	8019      	strh	r1, [r3, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	6123      	str	r3, [r4, #16]
 800494c:	4616      	mov	r6, r2
 800494e:	e7bc      	b.n	80048ca <_printf_i+0x146>
 8004950:	6833      	ldr	r3, [r6, #0]
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	6032      	str	r2, [r6, #0]
 8004956:	681e      	ldr	r6, [r3, #0]
 8004958:	6862      	ldr	r2, [r4, #4]
 800495a:	2100      	movs	r1, #0
 800495c:	4630      	mov	r0, r6
 800495e:	f7fb fc3f 	bl	80001e0 <memchr>
 8004962:	b108      	cbz	r0, 8004968 <_printf_i+0x1e4>
 8004964:	1b80      	subs	r0, r0, r6
 8004966:	6060      	str	r0, [r4, #4]
 8004968:	6863      	ldr	r3, [r4, #4]
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	2300      	movs	r3, #0
 800496e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004972:	e7aa      	b.n	80048ca <_printf_i+0x146>
 8004974:	6923      	ldr	r3, [r4, #16]
 8004976:	4632      	mov	r2, r6
 8004978:	4649      	mov	r1, r9
 800497a:	4640      	mov	r0, r8
 800497c:	47d0      	blx	sl
 800497e:	3001      	adds	r0, #1
 8004980:	d0ad      	beq.n	80048de <_printf_i+0x15a>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	079b      	lsls	r3, r3, #30
 8004986:	d413      	bmi.n	80049b0 <_printf_i+0x22c>
 8004988:	68e0      	ldr	r0, [r4, #12]
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	4298      	cmp	r0, r3
 800498e:	bfb8      	it	lt
 8004990:	4618      	movlt	r0, r3
 8004992:	e7a6      	b.n	80048e2 <_printf_i+0x15e>
 8004994:	2301      	movs	r3, #1
 8004996:	4632      	mov	r2, r6
 8004998:	4649      	mov	r1, r9
 800499a:	4640      	mov	r0, r8
 800499c:	47d0      	blx	sl
 800499e:	3001      	adds	r0, #1
 80049a0:	d09d      	beq.n	80048de <_printf_i+0x15a>
 80049a2:	3501      	adds	r5, #1
 80049a4:	68e3      	ldr	r3, [r4, #12]
 80049a6:	9903      	ldr	r1, [sp, #12]
 80049a8:	1a5b      	subs	r3, r3, r1
 80049aa:	42ab      	cmp	r3, r5
 80049ac:	dcf2      	bgt.n	8004994 <_printf_i+0x210>
 80049ae:	e7eb      	b.n	8004988 <_printf_i+0x204>
 80049b0:	2500      	movs	r5, #0
 80049b2:	f104 0619 	add.w	r6, r4, #25
 80049b6:	e7f5      	b.n	80049a4 <_printf_i+0x220>
 80049b8:	08004dbd 	.word	0x08004dbd
 80049bc:	08004dce 	.word	0x08004dce

080049c0 <__sflush_r>:
 80049c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c8:	0716      	lsls	r6, r2, #28
 80049ca:	4605      	mov	r5, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	d454      	bmi.n	8004a7a <__sflush_r+0xba>
 80049d0:	684b      	ldr	r3, [r1, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dc02      	bgt.n	80049dc <__sflush_r+0x1c>
 80049d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	dd48      	ble.n	8004a6e <__sflush_r+0xae>
 80049dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d045      	beq.n	8004a6e <__sflush_r+0xae>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049e8:	682f      	ldr	r7, [r5, #0]
 80049ea:	6a21      	ldr	r1, [r4, #32]
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	d030      	beq.n	8004a52 <__sflush_r+0x92>
 80049f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	0759      	lsls	r1, r3, #29
 80049f6:	d505      	bpl.n	8004a04 <__sflush_r+0x44>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049fe:	b10b      	cbz	r3, 8004a04 <__sflush_r+0x44>
 8004a00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a02:	1ad2      	subs	r2, r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a08:	6a21      	ldr	r1, [r4, #32]
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b0      	blx	r6
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	d106      	bne.n	8004a22 <__sflush_r+0x62>
 8004a14:	6829      	ldr	r1, [r5, #0]
 8004a16:	291d      	cmp	r1, #29
 8004a18:	d82b      	bhi.n	8004a72 <__sflush_r+0xb2>
 8004a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac4 <__sflush_r+0x104>)
 8004a1c:	40ca      	lsrs	r2, r1
 8004a1e:	07d6      	lsls	r6, r2, #31
 8004a20:	d527      	bpl.n	8004a72 <__sflush_r+0xb2>
 8004a22:	2200      	movs	r2, #0
 8004a24:	6062      	str	r2, [r4, #4]
 8004a26:	04d9      	lsls	r1, r3, #19
 8004a28:	6922      	ldr	r2, [r4, #16]
 8004a2a:	6022      	str	r2, [r4, #0]
 8004a2c:	d504      	bpl.n	8004a38 <__sflush_r+0x78>
 8004a2e:	1c42      	adds	r2, r0, #1
 8004a30:	d101      	bne.n	8004a36 <__sflush_r+0x76>
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	b903      	cbnz	r3, 8004a38 <__sflush_r+0x78>
 8004a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a3a:	602f      	str	r7, [r5, #0]
 8004a3c:	b1b9      	cbz	r1, 8004a6e <__sflush_r+0xae>
 8004a3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a42:	4299      	cmp	r1, r3
 8004a44:	d002      	beq.n	8004a4c <__sflush_r+0x8c>
 8004a46:	4628      	mov	r0, r5
 8004a48:	f7ff fbf4 	bl	8004234 <_free_r>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a50:	e00d      	b.n	8004a6e <__sflush_r+0xae>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b0      	blx	r6
 8004a58:	4602      	mov	r2, r0
 8004a5a:	1c50      	adds	r0, r2, #1
 8004a5c:	d1c9      	bne.n	80049f2 <__sflush_r+0x32>
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0c6      	beq.n	80049f2 <__sflush_r+0x32>
 8004a64:	2b1d      	cmp	r3, #29
 8004a66:	d001      	beq.n	8004a6c <__sflush_r+0xac>
 8004a68:	2b16      	cmp	r3, #22
 8004a6a:	d11e      	bne.n	8004aaa <__sflush_r+0xea>
 8004a6c:	602f      	str	r7, [r5, #0]
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e022      	b.n	8004ab8 <__sflush_r+0xf8>
 8004a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a76:	b21b      	sxth	r3, r3
 8004a78:	e01b      	b.n	8004ab2 <__sflush_r+0xf2>
 8004a7a:	690f      	ldr	r7, [r1, #16]
 8004a7c:	2f00      	cmp	r7, #0
 8004a7e:	d0f6      	beq.n	8004a6e <__sflush_r+0xae>
 8004a80:	0793      	lsls	r3, r2, #30
 8004a82:	680e      	ldr	r6, [r1, #0]
 8004a84:	bf08      	it	eq
 8004a86:	694b      	ldreq	r3, [r1, #20]
 8004a88:	600f      	str	r7, [r1, #0]
 8004a8a:	bf18      	it	ne
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	eba6 0807 	sub.w	r8, r6, r7
 8004a92:	608b      	str	r3, [r1, #8]
 8004a94:	f1b8 0f00 	cmp.w	r8, #0
 8004a98:	dde9      	ble.n	8004a6e <__sflush_r+0xae>
 8004a9a:	6a21      	ldr	r1, [r4, #32]
 8004a9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a9e:	4643      	mov	r3, r8
 8004aa0:	463a      	mov	r2, r7
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b0      	blx	r6
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	dc08      	bgt.n	8004abc <__sflush_r+0xfc>
 8004aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004abc:	4407      	add	r7, r0
 8004abe:	eba8 0800 	sub.w	r8, r8, r0
 8004ac2:	e7e7      	b.n	8004a94 <__sflush_r+0xd4>
 8004ac4:	20400001 	.word	0x20400001

08004ac8 <_fflush_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	4605      	mov	r5, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b913      	cbnz	r3, 8004ad8 <_fflush_r+0x10>
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	b118      	cbz	r0, 8004ae2 <_fflush_r+0x1a>
 8004ada:	6a03      	ldr	r3, [r0, #32]
 8004adc:	b90b      	cbnz	r3, 8004ae2 <_fflush_r+0x1a>
 8004ade:	f7ff faa1 	bl	8004024 <__sinit>
 8004ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f3      	beq.n	8004ad2 <_fflush_r+0xa>
 8004aea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004aec:	07d0      	lsls	r0, r2, #31
 8004aee:	d404      	bmi.n	8004afa <_fflush_r+0x32>
 8004af0:	0599      	lsls	r1, r3, #22
 8004af2:	d402      	bmi.n	8004afa <_fflush_r+0x32>
 8004af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004af6:	f7ff fb9a 	bl	800422e <__retarget_lock_acquire_recursive>
 8004afa:	4628      	mov	r0, r5
 8004afc:	4621      	mov	r1, r4
 8004afe:	f7ff ff5f 	bl	80049c0 <__sflush_r>
 8004b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b04:	07da      	lsls	r2, r3, #31
 8004b06:	4605      	mov	r5, r0
 8004b08:	d4e4      	bmi.n	8004ad4 <_fflush_r+0xc>
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	059b      	lsls	r3, r3, #22
 8004b0e:	d4e1      	bmi.n	8004ad4 <_fflush_r+0xc>
 8004b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b12:	f7ff fb8d 	bl	8004230 <__retarget_lock_release_recursive>
 8004b16:	e7dd      	b.n	8004ad4 <_fflush_r+0xc>

08004b18 <__swbuf_r>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	4605      	mov	r5, r0
 8004b20:	b118      	cbz	r0, 8004b2a <__swbuf_r+0x12>
 8004b22:	6a03      	ldr	r3, [r0, #32]
 8004b24:	b90b      	cbnz	r3, 8004b2a <__swbuf_r+0x12>
 8004b26:	f7ff fa7d 	bl	8004024 <__sinit>
 8004b2a:	69a3      	ldr	r3, [r4, #24]
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	071a      	lsls	r2, r3, #28
 8004b32:	d501      	bpl.n	8004b38 <__swbuf_r+0x20>
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	b943      	cbnz	r3, 8004b4a <__swbuf_r+0x32>
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 f82a 	bl	8004b94 <__swsetup_r>
 8004b40:	b118      	cbz	r0, 8004b4a <__swbuf_r+0x32>
 8004b42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b46:	4638      	mov	r0, r7
 8004b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	6922      	ldr	r2, [r4, #16]
 8004b4e:	1a98      	subs	r0, r3, r2
 8004b50:	6963      	ldr	r3, [r4, #20]
 8004b52:	b2f6      	uxtb	r6, r6
 8004b54:	4283      	cmp	r3, r0
 8004b56:	4637      	mov	r7, r6
 8004b58:	dc05      	bgt.n	8004b66 <__swbuf_r+0x4e>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f7ff ffb3 	bl	8004ac8 <_fflush_r>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d1ed      	bne.n	8004b42 <__swbuf_r+0x2a>
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60a3      	str	r3, [r4, #8]
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	6022      	str	r2, [r4, #0]
 8004b72:	701e      	strb	r6, [r3, #0]
 8004b74:	6962      	ldr	r2, [r4, #20]
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d004      	beq.n	8004b86 <__swbuf_r+0x6e>
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	07db      	lsls	r3, r3, #31
 8004b80:	d5e1      	bpl.n	8004b46 <__swbuf_r+0x2e>
 8004b82:	2e0a      	cmp	r6, #10
 8004b84:	d1df      	bne.n	8004b46 <__swbuf_r+0x2e>
 8004b86:	4621      	mov	r1, r4
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f7ff ff9d 	bl	8004ac8 <_fflush_r>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d0d9      	beq.n	8004b46 <__swbuf_r+0x2e>
 8004b92:	e7d6      	b.n	8004b42 <__swbuf_r+0x2a>

08004b94 <__swsetup_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4b29      	ldr	r3, [pc, #164]	@ (8004c3c <__swsetup_r+0xa8>)
 8004b98:	4605      	mov	r5, r0
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	b118      	cbz	r0, 8004ba8 <__swsetup_r+0x14>
 8004ba0:	6a03      	ldr	r3, [r0, #32]
 8004ba2:	b90b      	cbnz	r3, 8004ba8 <__swsetup_r+0x14>
 8004ba4:	f7ff fa3e 	bl	8004024 <__sinit>
 8004ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bac:	0719      	lsls	r1, r3, #28
 8004bae:	d422      	bmi.n	8004bf6 <__swsetup_r+0x62>
 8004bb0:	06da      	lsls	r2, r3, #27
 8004bb2:	d407      	bmi.n	8004bc4 <__swsetup_r+0x30>
 8004bb4:	2209      	movs	r2, #9
 8004bb6:	602a      	str	r2, [r5, #0]
 8004bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bc2:	e033      	b.n	8004c2c <__swsetup_r+0x98>
 8004bc4:	0758      	lsls	r0, r3, #29
 8004bc6:	d512      	bpl.n	8004bee <__swsetup_r+0x5a>
 8004bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bca:	b141      	cbz	r1, 8004bde <__swsetup_r+0x4a>
 8004bcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bd0:	4299      	cmp	r1, r3
 8004bd2:	d002      	beq.n	8004bda <__swsetup_r+0x46>
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f7ff fb2d 	bl	8004234 <_free_r>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	2300      	movs	r3, #0
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f043 0308 	orr.w	r3, r3, #8
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	b94b      	cbnz	r3, 8004c0e <__swsetup_r+0x7a>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c04:	d003      	beq.n	8004c0e <__swsetup_r+0x7a>
 8004c06:	4621      	mov	r1, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 f84f 	bl	8004cac <__smakebuf_r>
 8004c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c12:	f013 0201 	ands.w	r2, r3, #1
 8004c16:	d00a      	beq.n	8004c2e <__swsetup_r+0x9a>
 8004c18:	2200      	movs	r2, #0
 8004c1a:	60a2      	str	r2, [r4, #8]
 8004c1c:	6962      	ldr	r2, [r4, #20]
 8004c1e:	4252      	negs	r2, r2
 8004c20:	61a2      	str	r2, [r4, #24]
 8004c22:	6922      	ldr	r2, [r4, #16]
 8004c24:	b942      	cbnz	r2, 8004c38 <__swsetup_r+0xa4>
 8004c26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c2a:	d1c5      	bne.n	8004bb8 <__swsetup_r+0x24>
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	0799      	lsls	r1, r3, #30
 8004c30:	bf58      	it	pl
 8004c32:	6962      	ldrpl	r2, [r4, #20]
 8004c34:	60a2      	str	r2, [r4, #8]
 8004c36:	e7f4      	b.n	8004c22 <__swsetup_r+0x8e>
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e7f7      	b.n	8004c2c <__swsetup_r+0x98>
 8004c3c:	20000018 	.word	0x20000018

08004c40 <_sbrk_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d06      	ldr	r5, [pc, #24]	@ (8004c5c <_sbrk_r+0x1c>)
 8004c44:	2300      	movs	r3, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7fb ff2c 	bl	8000aa8 <_sbrk>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_sbrk_r+0x1a>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_sbrk_r+0x1a>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	200002a8 	.word	0x200002a8

08004c60 <__swhatbuf_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460c      	mov	r4, r1
 8004c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	b096      	sub	sp, #88	@ 0x58
 8004c6c:	4615      	mov	r5, r2
 8004c6e:	461e      	mov	r6, r3
 8004c70:	da0d      	bge.n	8004c8e <__swhatbuf_r+0x2e>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	bf14      	ite	ne
 8004c7e:	2340      	movne	r3, #64	@ 0x40
 8004c80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c84:	2000      	movs	r0, #0
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	b016      	add	sp, #88	@ 0x58
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	466a      	mov	r2, sp
 8004c90:	f000 f848 	bl	8004d24 <_fstat_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	dbec      	blt.n	8004c72 <__swhatbuf_r+0x12>
 8004c98:	9901      	ldr	r1, [sp, #4]
 8004c9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ca2:	4259      	negs	r1, r3
 8004ca4:	4159      	adcs	r1, r3
 8004ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004caa:	e7eb      	b.n	8004c84 <__swhatbuf_r+0x24>

08004cac <__smakebuf_r>:
 8004cac:	898b      	ldrh	r3, [r1, #12]
 8004cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cb0:	079d      	lsls	r5, r3, #30
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	d507      	bpl.n	8004cc8 <__smakebuf_r+0x1c>
 8004cb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	6163      	str	r3, [r4, #20]
 8004cc4:	b003      	add	sp, #12
 8004cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc8:	ab01      	add	r3, sp, #4
 8004cca:	466a      	mov	r2, sp
 8004ccc:	f7ff ffc8 	bl	8004c60 <__swhatbuf_r>
 8004cd0:	9f00      	ldr	r7, [sp, #0]
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f7ff fb18 	bl	800430c <_malloc_r>
 8004cdc:	b948      	cbnz	r0, 8004cf2 <__smakebuf_r+0x46>
 8004cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce2:	059a      	lsls	r2, r3, #22
 8004ce4:	d4ee      	bmi.n	8004cc4 <__smakebuf_r+0x18>
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	f043 0302 	orr.w	r3, r3, #2
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	e7e2      	b.n	8004cb8 <__smakebuf_r+0xc>
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	6020      	str	r0, [r4, #0]
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d02:	b15b      	cbz	r3, 8004d1c <__smakebuf_r+0x70>
 8004d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 f81d 	bl	8004d48 <_isatty_r>
 8004d0e:	b128      	cbz	r0, 8004d1c <__smakebuf_r+0x70>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	431d      	orrs	r5, r3
 8004d20:	81a5      	strh	r5, [r4, #12]
 8004d22:	e7cf      	b.n	8004cc4 <__smakebuf_r+0x18>

08004d24 <_fstat_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d07      	ldr	r5, [pc, #28]	@ (8004d44 <_fstat_r+0x20>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	f7fb fe90 	bl	8000a56 <_fstat>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d102      	bne.n	8004d40 <_fstat_r+0x1c>
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	b103      	cbz	r3, 8004d40 <_fstat_r+0x1c>
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
 8004d42:	bf00      	nop
 8004d44:	200002a8 	.word	0x200002a8

08004d48 <_isatty_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d06      	ldr	r5, [pc, #24]	@ (8004d64 <_isatty_r+0x1c>)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fb fe8f 	bl	8000a76 <_isatty>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_isatty_r+0x1a>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_isatty_r+0x1a>
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	200002a8 	.word	0x200002a8

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
